
Uart_RecvINT.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 e5 01 00 08 21 13 00 08 25 13 00 08     ... ....!...%...
 8000010:	29 13 00 08 2d 13 00 08 31 13 00 08 00 00 00 00     )...-...1.......
	...
 800002c:	35 13 00 08 39 13 00 08 00 00 00 00 e1 01 00 08     5...9...........
 800003c:	3d 13 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     =...............
 800004c:	45 13 00 08 e1 01 00 08 e1 01 00 08 41 13 00 08     E...........A...
 800005c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800006c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800007c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800008c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800009c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ac:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000bc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000cc:	e1 01 00 08 e1 01 00 08 cd 10 00 08 e1 01 00 08     ................
 80000dc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ec:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000fc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800010c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800011c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800012c:	e1 01 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001dc:	5f f8 e0 f1                                         _...

080001e0 <Default_Handler>:
#pragma weak DMA2_Channel2_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
 80001e0:	e7fe      	b.n	80001e0 <Default_Handler>
 80001e2:	bf00      	nop

080001e4 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001e4:	4668      	mov	r0, sp
 80001e6:	f020 0107 	bic.w	r1, r0, #7
 80001ea:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <Reset_Handler+0x70>)
 80001ee:	491a      	ldr	r1, [pc, #104]	; (8000258 <Reset_Handler+0x74>)
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001f0:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001f2:	4291      	cmp	r1, r2
 80001f4:	d00f      	beq.n	8000216 <Reset_Handler+0x32>
		while(dst < &_edata)
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <Reset_Handler+0x78>)
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d20c      	bcs.n	8000216 <Reset_Handler+0x32>
 80001fc:	43d4      	mvns	r4, r2
 80001fe:	4608      	mov	r0, r1
 8000200:	4423      	add	r3, r4
 8000202:	f023 0303 	bic.w	r3, r3, #3
 8000206:	3304      	adds	r3, #4
 8000208:	440b      	add	r3, r1
			*(dst++) = *(src++);
 800020a:	f850 1b04 	ldr.w	r1, [r0], #4
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
		while(dst < &_edata)
 800020e:	4298      	cmp	r0, r3
			*(dst++) = *(src++);
 8000210:	f842 1b04 	str.w	r1, [r2], #4
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
		while(dst < &_edata)
 8000214:	d1f9      	bne.n	800020a <Reset_Handler+0x26>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <Reset_Handler+0x7c>)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <Reset_Handler+0x80>)
 800021a:	429a      	cmp	r2, r3
 800021c:	d20b      	bcs.n	8000236 <Reset_Handler+0x52>
 800021e:	43d0      	mvns	r0, r2
 8000220:	4403      	add	r3, r0
 8000222:	f023 0303 	bic.w	r3, r3, #3
 8000226:	3304      	adds	r3, #4
 8000228:	4611      	mov	r1, r2
 800022a:	4413      	add	r3, r2
		*(dst++) = 0;
 800022c:	2200      	movs	r2, #0
 800022e:	f841 2b04 	str.w	r2, [r1], #4
	if (src != dst)
		while(dst < &_edata)
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 8000232:	4299      	cmp	r1, r3
 8000234:	d1fb      	bne.n	800022e <Reset_Handler+0x4a>
		*(dst++) = 0;
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <Reset_Handler+0x84>)
 8000238:	4a0c      	ldr	r2, [pc, #48]	; (800026c <Reset_Handler+0x88>)
 800023a:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800023e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000246:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */
 8000248:	f000 ffb4 	bl	80011b4 <SystemInit>
	main(); /* start execution of the program */
 800024c:	f001 f87c 	bl	8001348 <main>
 8000250:	e7fe      	b.n	8000250 <Reset_Handler+0x6c>
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	08001e90 	.word	0x08001e90
 800025c:	20000090 	.word	0x20000090
 8000260:	20000090 	.word	0x20000090
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000270:	4913      	ldr	r1, [pc, #76]	; (80002c0 <__Init_Data+0x50>)
 8000272:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <__Init_Data+0x54>)
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000274:	b410      	push	{r4}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000276:	4291      	cmp	r1, r2
 8000278:	d00f      	beq.n	800029a <__Init_Data+0x2a>
		while(dst < &_edata)
 800027a:	4813      	ldr	r0, [pc, #76]	; (80002c8 <__Init_Data+0x58>)
 800027c:	4282      	cmp	r2, r0
 800027e:	d20c      	bcs.n	800029a <__Init_Data+0x2a>
 8000280:	43d4      	mvns	r4, r2
 8000282:	460b      	mov	r3, r1
 8000284:	4420      	add	r0, r4
 8000286:	f020 0003 	bic.w	r0, r0, #3
 800028a:	3004      	adds	r0, #4
 800028c:	4408      	add	r0, r1
			*(dst++) = *(src++);
 800028e:	f853 1b04 	ldr.w	r1, [r3], #4
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
		while(dst < &_edata)
 8000292:	4283      	cmp	r3, r0
			*(dst++) = *(src++);
 8000294:	f842 1b04 	str.w	r1, [r2], #4
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
		while(dst < &_edata)
 8000298:	d1f9      	bne.n	800028e <__Init_Data+0x1e>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800029a:	490c      	ldr	r1, [pc, #48]	; (80002cc <__Init_Data+0x5c>)
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <__Init_Data+0x60>)
 800029e:	4291      	cmp	r1, r2
 80002a0:	d20b      	bcs.n	80002ba <__Init_Data+0x4a>
 80002a2:	43c8      	mvns	r0, r1
 80002a4:	4402      	add	r2, r0
 80002a6:	f022 0203 	bic.w	r2, r2, #3
 80002aa:	3204      	adds	r2, #4
 80002ac:	460b      	mov	r3, r1
 80002ae:	440a      	add	r2, r1
		*(dst++) = 0;
 80002b0:	2100      	movs	r1, #0
 80002b2:	f843 1b04 	str.w	r1, [r3], #4
	if (src != dst)
		while(dst < &_edata)
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d1fb      	bne.n	80002b2 <__Init_Data+0x42>
		*(dst++) = 0;
}
 80002ba:	bc10      	pop	{r4}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	08001e90 	.word	0x08001e90
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000090 	.word	0x20000090
 80002cc:	20000090 	.word	0x20000090
 80002d0:	200000e8 	.word	0x200000e8

080002d4 <Hardware_Init>:
*
*	说明：		初始化单片机功能以及外接设备
************************************************************
*/
void Hardware_Init(void)
{
 80002d4:	b508      	push	{r3, lr}
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);		//中断控制器分组设置
 80002d6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80002da:	f000 f809 	bl	80002f0 <NVIC_PriorityGroupConfig>

	Delay_Init();										//Systick初始化，用于普通的延时
 80002de:	f000 fdbd 	bl	8000e5c <Delay_Init>
	
	Usart1_Init(115200);								//初始化串口1，波特率115200

}
 80002e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);		//中断控制器分组设置

	Delay_Init();										//Systick初始化，用于普通的延时
	
	Usart1_Init(115200);								//初始化串口1，波特率115200
 80002e6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80002ea:	f000 be07 	b.w	8000efc <Usart1_Init>
 80002ee:	bf00      	nop

080002f0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80002f0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <NVIC_PriorityGroupConfig+0x10>)
 80002f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80002fa:	60d8      	str	r0, [r3, #12]
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000304:	78c3      	ldrb	r3, [r0, #3]
 8000306:	b95b      	cbnz	r3, 8000320 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000308:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800030a:	2101      	movs	r1, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800030c:	095a      	lsrs	r2, r3, #5
 800030e:	4816      	ldr	r0, [pc, #88]	; (8000368 <NVIC_Init+0x64>)
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000310:	f003 031f 	and.w	r3, r3, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000314:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800031a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800031e:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <NVIC_Init+0x68>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000322:	b430      	push	{r4, r5}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000324:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000326:	7882      	ldrb	r2, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000328:	43c9      	mvns	r1, r1
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800032a:	7844      	ldrb	r4, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800032c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000330:	230f      	movs	r3, #15
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 8000332:	f1c1 0504 	rsb	r5, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000336:	40cb      	lsrs	r3, r1
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000338:	40ac      	lsls	r4, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800033a:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800033c:	7802      	ldrb	r2, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800033e:	4323      	orrs	r3, r4
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800034c:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000350:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000352:	2201      	movs	r2, #1
 8000354:	f003 001f 	and.w	r0, r3, #31

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000358:	4903      	ldr	r1, [pc, #12]	; (8000368 <NVIC_Init+0x64>)
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800035a:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800035c:	4082      	lsls	r2, r0
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800035e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000362:	bc30      	pop	{r4, r5}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000370:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000374:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000378:	4b01      	ldr	r3, [pc, #4]	; (8000380 <NVIC_SetVectorTable+0x10>)
 800037a:	4308      	orrs	r0, r1
 800037c:	6098      	str	r0, [r3, #8]
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <NVIC_SystemLPConfig+0x14>)
 8000386:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000388:	b919      	cbnz	r1, 8000392 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800038a:	ea23 0000 	bic.w	r0, r3, r0
 800038e:	6110      	str	r0, [r2, #16]
 8000390:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000392:	4318      	orrs	r0, r3
 8000394:	6110      	str	r0, [r2, #16]
 8000396:	4770      	bx	lr
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <SysTick_CLKSourceConfig+0x14>)
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800039e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80003a0:	6813      	ldr	r3, [r2, #0]
 80003a2:	bf0c      	ite	eq
 80003a4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80003a8:	f023 0304 	bicne.w	r3, r3, #4
 80003ac:	6013      	str	r3, [r2, #0]
 80003ae:	4770      	bx	lr
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80003b4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 80003b6:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <GPIO_DeInit+0xc0>)
 80003b8:	4298      	cmp	r0, r3
 80003ba:	d01e      	beq.n	80003fa <GPIO_DeInit+0x46>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <GPIO_DeInit+0xc4>)
 80003be:	4298      	cmp	r0, r3
 80003c0:	d025      	beq.n	800040e <GPIO_DeInit+0x5a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 80003c2:	4b2e      	ldr	r3, [pc, #184]	; (800047c <GPIO_DeInit+0xc8>)
 80003c4:	4298      	cmp	r0, r3
 80003c6:	d02c      	beq.n	8000422 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <GPIO_DeInit+0xcc>)
 80003ca:	4298      	cmp	r0, r3
 80003cc:	d033      	beq.n	8000436 <GPIO_DeInit+0x82>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <GPIO_DeInit+0xd0>)
 80003d0:	4298      	cmp	r0, r3
 80003d2:	d03a      	beq.n	800044a <GPIO_DeInit+0x96>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <GPIO_DeInit+0xd4>)
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d041      	beq.n	800045e <GPIO_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOG)
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <GPIO_DeInit+0xd8>)
 80003dc:	4298      	cmp	r0, r3
 80003de:	d000      	beq.n	80003e2 <GPIO_DeInit+0x2e>
 80003e0:	bd08      	pop	{r3, pc}
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80003e2:	2101      	movs	r1, #1
 80003e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003e8:	f000 fab6 	bl	8000958 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 80003ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80003f0:	2100      	movs	r1, #0
 80003f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003f6:	f000 baaf 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80003fa:	2101      	movs	r1, #1
 80003fc:	2004      	movs	r0, #4
 80003fe:	f000 faab 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000406:	2100      	movs	r1, #0
 8000408:	2004      	movs	r0, #4
 800040a:	f000 baa5 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800040e:	2101      	movs	r1, #1
 8000410:	2008      	movs	r0, #8
 8000412:	f000 faa1 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800041a:	2100      	movs	r1, #0
 800041c:	2008      	movs	r0, #8
 800041e:	f000 ba9b 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000422:	2101      	movs	r1, #1
 8000424:	2010      	movs	r0, #16
 8000426:	f000 fa97 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 800042a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 800042e:	2100      	movs	r1, #0
 8000430:	2010      	movs	r0, #16
 8000432:	f000 ba91 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	2020      	movs	r0, #32
 800043a:	f000 fa8d 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 800043e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8000442:	2100      	movs	r1, #0
 8000444:	2020      	movs	r0, #32
 8000446:	f000 ba87 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  }    
  else if (GPIOx == GPIOE)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 800044a:	2101      	movs	r1, #1
 800044c:	2040      	movs	r0, #64	; 0x40
 800044e:	f000 fa83 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000456:	2100      	movs	r1, #0
 8000458:	2040      	movs	r0, #64	; 0x40
 800045a:	f000 ba7d 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  } 
  else if (GPIOx == GPIOF)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800045e:	2101      	movs	r1, #1
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	f000 fa79 	bl	8000958 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800046a:	2100      	movs	r1, #0
 800046c:	2080      	movs	r0, #128	; 0x80
 800046e:	f000 ba73 	b.w	8000958 <RCC_APB2PeriphResetCmd>
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800
 8000478:	40010c00 	.word	0x40010c00
 800047c:	40011000 	.word	0x40011000
 8000480:	40011400 	.word	0x40011400
 8000484:	40011800 	.word	0x40011800
 8000488:	40011c00 	.word	0x40011c00
 800048c:	40012000 	.word	0x40012000

08000490 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8000490:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000492:	2101      	movs	r1, #1
 8000494:	4608      	mov	r0, r1
 8000496:	f000 fa5f 	bl	8000958 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800049a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800049e:	2100      	movs	r1, #0
 80004a0:	2001      	movs	r0, #1
 80004a2:	f000 ba59 	b.w	8000958 <RCC_APB2PeriphResetCmd>
 80004a6:	bf00      	nop

080004a8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80004ac:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80004ae:	06e3      	lsls	r3, r4, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80004b0:	bf48      	it	mi
 80004b2:	788b      	ldrbmi	r3, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80004b4:	8809      	ldrh	r1, [r1, #0]
 80004b6:	f004 070f 	and.w	r7, r4, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80004ba:	bf48      	it	mi
 80004bc:	431f      	orrmi	r7, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80004be:	f011 0fff 	tst.w	r1, #255	; 0xff
 80004c2:	d021      	beq.n	8000508 <GPIO_Init+0x60>
  {
    tmpreg = GPIOx->CRL;
 80004c4:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004c6:	2300      	movs	r3, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 80004c8:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80004cc:	f04f 080f 	mov.w	r8, #15
 80004d0:	e002      	b.n	80004d8 <GPIO_Init+0x30>
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004d2:	3301      	adds	r3, #1
 80004d4:	2b08      	cmp	r3, #8
 80004d6:	d016      	beq.n	8000506 <GPIO_Init+0x5e>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80004d8:	fa0e f203 	lsl.w	r2, lr, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80004dc:	ea32 0501 	bics.w	r5, r2, r1
 80004e0:	d1f7      	bne.n	80004d2 <GPIO_Init+0x2a>
      {
        pos = pinpos << 2;
 80004e2:	009d      	lsls	r5, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80004e4:	fa08 fc05 	lsl.w	ip, r8, r5
 80004e8:	ea26 060c 	bic.w	r6, r6, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004ec:	fa07 f505 	lsl.w	r5, r7, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004f0:	2c28      	cmp	r4, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004f2:	ea46 0605 	orr.w	r6, r6, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004f6:	d031      	beq.n	800055c <GPIO_Init+0xb4>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004f8:	2c48      	cmp	r4, #72	; 0x48
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004fa:	f103 0301 	add.w	r3, r3, #1
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80004fe:	bf08      	it	eq
 8000500:	6102      	streq	r2, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000502:	2b08      	cmp	r3, #8
 8000504:	d1e8      	bne.n	80004d8 <GPIO_Init+0x30>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000506:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000508:	29ff      	cmp	r1, #255	; 0xff
 800050a:	d923      	bls.n	8000554 <GPIO_Init+0xac>
  {
    tmpreg = GPIOx->CRH;
 800050c:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800050e:	2300      	movs	r3, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000510:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000514:	f04f 080f 	mov.w	r8, #15
 8000518:	e002      	b.n	8000520 <GPIO_Init+0x78>
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800051a:	3301      	adds	r3, #1
 800051c:	2b08      	cmp	r3, #8
 800051e:	d018      	beq.n	8000552 <GPIO_Init+0xaa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000520:	f103 0208 	add.w	r2, r3, #8
 8000524:	fa0e f202 	lsl.w	r2, lr, r2
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000528:	ea32 0501 	bics.w	r5, r2, r1
 800052c:	d1f5      	bne.n	800051a <GPIO_Init+0x72>
      {
        pos = pinpos << 2;
 800052e:	009d      	lsls	r5, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000530:	fa08 fc05 	lsl.w	ip, r8, r5
 8000534:	ea26 060c 	bic.w	r6, r6, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000538:	fa07 f505 	lsl.w	r5, r7, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800053c:	2c28      	cmp	r4, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800053e:	ea46 0605 	orr.w	r6, r6, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000542:	d009      	beq.n	8000558 <GPIO_Init+0xb0>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000544:	2c48      	cmp	r4, #72	; 0x48
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000546:	f103 0301 	add.w	r3, r3, #1
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800054a:	bf08      	it	eq
 800054c:	6102      	streq	r2, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800054e:	2b08      	cmp	r3, #8
 8000550:	d1e6      	bne.n	8000520 <GPIO_Init+0x78>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000552:	6046      	str	r6, [r0, #4]
 8000554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000558:	6142      	str	r2, [r0, #20]
 800055a:	e7de      	b.n	800051a <GPIO_Init+0x72>
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800055c:	6142      	str	r2, [r0, #20]
 800055e:	e7b8      	b.n	80004d2 <GPIO_Init+0x2a>

08000560 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000560:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000564:	2202      	movs	r2, #2
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000566:	2304      	movs	r3, #4
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000568:	8001      	strh	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800056a:	7082      	strb	r2, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800056c:	70c3      	strb	r3, [r0, #3]
 800056e:	4770      	bx	lr

08000570 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000570:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000572:	4219      	tst	r1, r3
}
 8000574:	bf14      	ite	ne
 8000576:	2001      	movne	r0, #1
 8000578:	2000      	moveq	r0, #0
 800057a:	4770      	bx	lr

0800057c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800057c:	6880      	ldr	r0, [r0, #8]
}
 800057e:	b280      	uxth	r0, r0
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000584:	68c3      	ldr	r3, [r0, #12]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000586:	4219      	tst	r1, r3
}
 8000588:	bf14      	ite	ne
 800058a:	2001      	movne	r0, #1
 800058c:	2000      	moveq	r0, #0
 800058e:	4770      	bx	lr

08000590 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000590:	68c0      	ldr	r0, [r0, #12]
}
 8000592:	b280      	uxth	r0, r0
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000598:	6101      	str	r1, [r0, #16]
 800059a:	4770      	bx	lr

0800059c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800059c:	6141      	str	r1, [r0, #20]
 800059e:	4770      	bx	lr

080005a0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80005a0:	b90a      	cbnz	r2, 80005a6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80005a2:	6141      	str	r1, [r0, #20]
 80005a4:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80005a6:	6101      	str	r1, [r0, #16]
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80005ac:	60c1      	str	r1, [r0, #12]
 80005ae:	4770      	bx	lr

080005b0 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80005b0:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005b4:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80005b6:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005b8:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005ba:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005bc:	6983      	ldr	r3, [r0, #24]
 80005be:	4770      	bx	lr

080005c0 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80005c0:	f64f 7380 	movw	r3, #65408	; 0xff80
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <GPIO_EventOutputConfig+0x18>)
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80005c6:	b410      	push	{r4}
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80005c8:	6814      	ldr	r4, [r2, #0]
 80005ca:	4023      	ands	r3, r4
 80005cc:	4319      	orrs	r1, r3
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80005ce:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 80005d2:	6010      	str	r0, [r2, #0]
}
 80005d4:	bc10      	pop	{r4}
 80005d6:	4770      	bx	lr
 80005d8:	40010000 	.word	0x40010000

080005dc <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <GPIO_EventOutputCmd+0x8>)
 80005de:	6018      	str	r0, [r3, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	4220001c 	.word	0x4220001c

080005e8 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80005e8:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80005ec:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 80005f0:	bfb4      	ite	lt
 80005f2:	69db      	ldrlt	r3, [r3, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80005f4:	685b      	ldrge	r3, [r3, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80005f6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80005fa:	b430      	push	{r4, r5}
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80005fc:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80005fe:	d01e      	beq.n	800063e <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000600:	02c2      	lsls	r2, r0, #11
 8000602:	d513      	bpl.n	800062c <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8000604:	f3c0 4503 	ubfx	r5, r0, #16, #4
 8000608:	2203      	movs	r2, #3
 800060a:	40aa      	lsls	r2, r5
 800060c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000610:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8000614:	b119      	cbz	r1, 800061e <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000616:	0d42      	lsrs	r2, r0, #21
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	4094      	lsls	r4, r2
 800061c:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <GPIO_PinRemapConfig+0x68>)
  if (NewState != DISABLE)
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000620:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8000622:	bfb4      	ite	lt
 8000624:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000626:	6053      	strge	r3, [r2, #4]
  }  
}
 8000628:	bc30      	pop	{r4, r5}
 800062a:	4770      	bx	lr
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800062c:	0d42      	lsrs	r2, r0, #21
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	fa04 f202 	lsl.w	r2, r4, r2
 8000634:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000638:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800063c:	e7ea      	b.n	8000614 <GPIO_PinRemapConfig+0x2c>
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800063e:	4d04      	ldr	r5, [pc, #16]	; (8000650 <GPIO_PinRemapConfig+0x68>)
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000640:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000644:	686a      	ldr	r2, [r5, #4]
 8000646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800064a:	606a      	str	r2, [r5, #4]
 800064c:	e7e2      	b.n	8000614 <GPIO_PinRemapConfig+0x2c>
 800064e:	bf00      	nop
 8000650:	40010000 	.word	0x40010000

08000654 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000654:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800065c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000660:	f001 0103 	and.w	r1, r1, #3
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000664:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000666:	0089      	lsls	r1, r1, #2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000668:	689c      	ldr	r4, [r3, #8]
 800066a:	220f      	movs	r2, #15
 800066c:	408a      	lsls	r2, r1
 800066e:	ea24 0202 	bic.w	r2, r4, r2
 8000672:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	4088      	lsls	r0, r1
 8000678:	4310      	orrs	r0, r2
 800067a:	6098      	str	r0, [r3, #8]
}
 800067c:	bc10      	pop	{r4}
 800067e:	4770      	bx	lr

08000680 <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 8000682:	6018      	str	r0, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	422000dc 	.word	0x422000dc

0800068c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <RCC_DeInit+0x38>)

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <RCC_DeInit+0x3c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000690:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000692:	f44f 001f 	mov.w	r0, #10420224	; 0x9f0000
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000696:	f041 0101 	orr.w	r1, r1, #1
 800069a:	6019      	str	r1, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800069c:	6859      	ldr	r1, [r3, #4]
 800069e:	400a      	ands	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80006a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80006bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80006be:	6098      	str	r0, [r3, #8]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	f8ff0000 	.word	0xf8ff0000

080006cc <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80006ce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006d8:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006e0:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80006e2:	d008      	beq.n	80006f6 <RCC_HSEConfig+0x2a>
 80006e4:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80006e8:	d104      	bne.n	80006f4 <RCC_HSEConfig+0x28>
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4770      	bx	lr
 80006f4:	4770      	bx	lr
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006fc:	601a      	str	r2, [r3, #0]
      break;
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000704:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 8000706:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <RCC_WaitForHSEStartUp+0x30>)
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	e002      	b.n	8000714 <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800070e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000712:	d008      	beq.n	8000726 <RCC_WaitForHSEStartUp+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000714:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000716:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 800071a:	9b01      	ldr	r3, [sp, #4]
 800071c:	f103 0301 	add.w	r3, r3, #1
 8000720:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000722:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000724:	d0f3      	beq.n	800070e <RCC_WaitForHSEStartUp+0xa>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <RCC_WaitForHSEStartUp+0x30>)
 8000728:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 800072a:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 800072e:	b002      	add	sp, #8
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <RCC_AdjustHSICalibrationValue+0x10>)
 800073a:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800073c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000740:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8000744:	6010      	str	r0, [r2, #0]
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800074c:	4b01      	ldr	r3, [pc, #4]	; (8000754 <RCC_HSICmd+0x8>)
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	42420000 	.word	0x42420000

08000758 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <RCC_PLLConfig+0x10>)
 800075a:	6853      	ldr	r3, [r2, #4]
 800075c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000760:	4319      	orrs	r1, r3
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000762:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000764:	6050      	str	r0, [r2, #4]
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000

0800076c <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <RCC_PLLCmd+0x8>)
 800076e:	6018      	str	r0, [r3, #0]
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	42420060 	.word	0x42420060

08000778 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <RCC_SYSCLKConfig+0x10>)
 800077a:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800077c:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000780:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000782:	6050      	str	r0, [r2, #4]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <RCC_GetSYSCLKSource+0xc>)
 800078e:	6858      	ldr	r0, [r3, #4]
}
 8000790:	f000 000c 	and.w	r0, r0, #12
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <RCC_HCLKConfig+0x10>)
 800079e:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80007a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80007a4:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007a6:	6050      	str	r0, [r2, #4]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <RCC_PCLK1Config+0x10>)
 80007b2:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80007b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80007b8:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007ba:	6050      	str	r0, [r2, #4]
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <RCC_PCLK2Config+0x10>)
 80007c6:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80007c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80007cc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007d0:	6050      	str	r0, [r2, #4]
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000

080007d8 <RCC_ITConfig>:
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d8:	b929      	cbnz	r1, 80007e6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <RCC_ITConfig+0x18>)
 80007dc:	7813      	ldrb	r3, [r2, #0]
 80007de:	ea23 0000 	bic.w	r0, r3, r0
 80007e2:	7010      	strb	r0, [r2, #0]
 80007e4:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80007e6:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <RCC_ITConfig+0x18>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4310      	orrs	r0, r2
 80007ec:	7018      	strb	r0, [r3, #0]
 80007ee:	4770      	bx	lr
 80007f0:	40021009 	.word	0x40021009

080007f4 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <RCC_USBCLKConfig+0x8>)
 80007f6:	6018      	str	r0, [r3, #0]
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	424200d8 	.word	0x424200d8

08000800 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <RCC_ADCCLKConfig+0x10>)
 8000802:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000804:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000808:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800080a:	6050      	str	r0, [r2, #4]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <RCC_LSEConfig+0x1c>)
 8000816:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000818:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800081a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800081c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800081e:	d005      	beq.n	800082c <RCC_LSEConfig+0x18>
 8000820:	2804      	cmp	r0, #4
 8000822:	d102      	bne.n	800082a <RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000824:	2205      	movs	r2, #5
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	4770      	bx	lr
 800082a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800082c:	7018      	strb	r0, [r3, #0]
      break;
 800082e:	4770      	bx	lr
 8000830:	40021020 	.word	0x40021020

08000834 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <RCC_LSICmd+0x8>)
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	42420480 	.word	0x42420480

08000840 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000840:	4a02      	ldr	r2, [pc, #8]	; (800084c <RCC_RTCCLKConfig+0xc>)
 8000842:	6a13      	ldr	r3, [r2, #32]
 8000844:	4318      	orrs	r0, r3
 8000846:	6210      	str	r0, [r2, #32]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000850:	4b01      	ldr	r3, [pc, #4]	; (8000858 <RCC_RTCCLKCmd+0x8>)
 8000852:	6018      	str	r0, [r3, #0]
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	4242043c 	.word	0x4242043c

0800085c <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800085c:	4a23      	ldr	r2, [pc, #140]	; (80008ec <RCC_GetClocksFreq+0x90>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800085e:	b410      	push	{r4}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000860:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 8000862:	f003 030c 	and.w	r3, r3, #12
 8000866:	2b04      	cmp	r3, #4
 8000868:	d038      	beq.n	80008dc <RCC_GetClocksFreq+0x80>
 800086a:	2b08      	cmp	r3, #8
 800086c:	d025      	beq.n	80008ba <RCC_GetClocksFreq+0x5e>
 800086e:	b30b      	cbz	r3, 80008b4 <RCC_GetClocksFreq+0x58>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <RCC_GetClocksFreq+0x94>)
      break;
 8000872:	4613      	mov	r3, r2
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000874:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <RCC_GetClocksFreq+0x90>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000878:	491e      	ldr	r1, [pc, #120]	; (80008f4 <RCC_GetClocksFreq+0x98>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800087a:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 4;
 800087c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000880:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000882:	40e3      	lsrs	r3, r4
 8000884:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000886:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8000888:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 800088c:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800088e:	fa23 f404 	lsr.w	r4, r3, r4
 8000892:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000894:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8000896:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 800089a:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800089c:	40e3      	lsrs	r3, r4
 800089e:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80008a0:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 80008a2:	bc10      	pop	{r4}
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
 80008a4:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80008a8:	440a      	add	r2, r1
 80008aa:	7c12      	ldrb	r2, [r2, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80008ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80008b0:	6103      	str	r3, [r0, #16]
}
 80008b2:	4770      	bx	lr
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <RCC_GetClocksFreq+0x94>)
 80008b6:	6003      	str	r3, [r0, #0]
      break;
 80008b8:	e7dd      	b.n	8000876 <RCC_GetClocksFreq+0x1a>
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80008ba:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80008bc:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80008be:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 80008c2:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80008c4:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 80008c8:	d50b      	bpl.n	80008e2 <RCC_GetClocksFreq+0x86>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80008ca:	6852      	ldr	r2, [r2, #4]
 80008cc:	0392      	lsls	r2, r2, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80008ce:	bf4c      	ite	mi
 80008d0:	4a09      	ldrmi	r2, [pc, #36]	; (80008f8 <RCC_GetClocksFreq+0x9c>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80008d2:	4a0a      	ldrpl	r2, [pc, #40]	; (80008fc <RCC_GetClocksFreq+0xa0>)
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	6003      	str	r3, [r0, #0]
 80008da:	e7cc      	b.n	8000876 <RCC_GetClocksFreq+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <RCC_GetClocksFreq+0xa0>)
 80008de:	6003      	str	r3, [r0, #0]
      break;
 80008e0:	e7c9      	b.n	8000876 <RCC_GetClocksFreq+0x1a>
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <RCC_GetClocksFreq+0xa4>)
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	6003      	str	r3, [r0, #0]
 80008ea:	e7c4      	b.n	8000876 <RCC_GetClocksFreq+0x1a>
 80008ec:	40021000 	.word	0x40021000
 80008f0:	007a1200 	.word	0x007a1200
 80008f4:	20000000 	.word	0x20000000
 80008f8:	005b8d80 	.word	0x005b8d80
 80008fc:	00b71b00 	.word	0x00b71b00
 8000900:	003d0900 	.word	0x003d0900

08000904 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000904:	b929      	cbnz	r1, 8000912 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <RCC_AHBPeriphClockCmd+0x18>)
 8000908:	6953      	ldr	r3, [r2, #20]
 800090a:	ea23 0000 	bic.w	r0, r3, r0
 800090e:	6150      	str	r0, [r2, #20]
 8000910:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000912:	4b02      	ldr	r3, [pc, #8]	; (800091c <RCC_AHBPeriphClockCmd+0x18>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4310      	orrs	r0, r2
 8000918:	6158      	str	r0, [r3, #20]
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000920:	b929      	cbnz	r1, 800092e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <RCC_APB2PeriphClockCmd+0x18>)
 8000924:	6993      	ldr	r3, [r2, #24]
 8000926:	ea23 0000 	bic.w	r0, r3, r0
 800092a:	6190      	str	r0, [r2, #24]
 800092c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800092e:	4b02      	ldr	r3, [pc, #8]	; (8000938 <RCC_APB2PeriphClockCmd+0x18>)
 8000930:	699a      	ldr	r2, [r3, #24]
 8000932:	4310      	orrs	r0, r2
 8000934:	6198      	str	r0, [r3, #24]
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800093c:	b929      	cbnz	r1, 800094a <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <RCC_APB1PeriphClockCmd+0x18>)
 8000940:	69d3      	ldr	r3, [r2, #28]
 8000942:	ea23 0000 	bic.w	r0, r3, r0
 8000946:	61d0      	str	r0, [r2, #28]
 8000948:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800094a:	4b02      	ldr	r3, [pc, #8]	; (8000954 <RCC_APB1PeriphClockCmd+0x18>)
 800094c:	69da      	ldr	r2, [r3, #28]
 800094e:	4310      	orrs	r0, r2
 8000950:	61d8      	str	r0, [r3, #28]
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000

08000958 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000958:	b929      	cbnz	r1, 8000966 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <RCC_APB2PeriphResetCmd+0x18>)
 800095c:	68d3      	ldr	r3, [r2, #12]
 800095e:	ea23 0000 	bic.w	r0, r3, r0
 8000962:	60d0      	str	r0, [r2, #12]
 8000964:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000966:	4b02      	ldr	r3, [pc, #8]	; (8000970 <RCC_APB2PeriphResetCmd+0x18>)
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	4310      	orrs	r0, r2
 800096c:	60d8      	str	r0, [r3, #12]
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000974:	b929      	cbnz	r1, 8000982 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <RCC_APB1PeriphResetCmd+0x18>)
 8000978:	6913      	ldr	r3, [r2, #16]
 800097a:	ea23 0000 	bic.w	r0, r3, r0
 800097e:	6110      	str	r0, [r2, #16]
 8000980:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000982:	4b02      	ldr	r3, [pc, #8]	; (800098c <RCC_APB1PeriphResetCmd+0x18>)
 8000984:	691a      	ldr	r2, [r3, #16]
 8000986:	4310      	orrs	r0, r2
 8000988:	6118      	str	r0, [r3, #16]
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <RCC_BackupResetCmd+0x8>)
 8000992:	6018      	str	r0, [r3, #0]
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	42420440 	.word	0x42420440

0800099c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <RCC_ClockSecuritySystemCmd+0x8>)
 800099e:	6018      	str	r0, [r3, #0]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	4242004c 	.word	0x4242004c

080009a8 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <RCC_MCOConfig+0x8>)
 80009aa:	7018      	strb	r0, [r3, #0]
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021007 	.word	0x40021007

080009b4 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80009b4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d00b      	beq.n	80009d2 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80009ba:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <RCC_GetFlagStatus+0x30>)
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 80009be:	f000 001f 	and.w	r0, r0, #31
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 80009c2:	bf0c      	ite	eq
 80009c4:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80009c6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 80009c8:	fa23 f000 	lsr.w	r0, r3, r0
}
 80009cc:	f000 0001 	and.w	r0, r0, #1
 80009d0:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <RCC_GetFlagStatus+0x30>)
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 80009d4:	f000 001f 	and.w	r0, r0, #31

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80009d8:	681b      	ldr	r3, [r3, #0]
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 80009da:	fa23 f000 	lsr.w	r0, r3, r0
}
 80009de:	f000 0001 	and.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80009e8:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <RCC_ClearFlag+0xc>)
 80009ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009f0:	6253      	str	r3, [r2, #36]	; 0x24
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <RCC_GetITStatus+0x10>)
 80009fa:	689b      	ldr	r3, [r3, #8]
  {
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 80009fc:	4218      	tst	r0, r3
}
 80009fe:	bf14      	ite	ne
 8000a00:	2001      	movne	r0, #1
 8000a02:	2000      	moveq	r0, #0
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000a0c:	4b01      	ldr	r3, [pc, #4]	; (8000a14 <RCC_ClearITPendingBit+0x8>)
 8000a0e:	7018      	strb	r0, [r3, #0]
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	4002100a 	.word	0x4002100a

08000a18 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000a18:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <USART_DeInit+0x9c>)
 8000a1c:	4298      	cmp	r0, r3
 8000a1e:	d018      	beq.n	8000a52 <USART_DeInit+0x3a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <USART_DeInit+0xa0>)
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d021      	beq.n	8000a6a <USART_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <USART_DeInit+0xa4>)
 8000a28:	4298      	cmp	r0, r3
 8000a2a:	d02a      	beq.n	8000a82 <USART_DeInit+0x6a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <USART_DeInit+0xa8>)
 8000a2e:	4298      	cmp	r0, r3
 8000a30:	d033      	beq.n	8000a9a <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }    
  else
  {
    if (USARTx == UART5)
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <USART_DeInit+0xac>)
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d000      	beq.n	8000a3a <USART_DeInit+0x22>
 8000a38:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a40:	f7ff ff98 	bl	8000974 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a4e:	f7ff bf91 	b.w	8000974 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000a52:	2101      	movs	r1, #1
 8000a54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a58:	f7ff ff7e 	bl	8000958 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000a60:	2100      	movs	r1, #0
 8000a62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a66:	f7ff bf77 	b.w	8000958 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a70:	f7ff ff80 	bl	8000974 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a7e:	f7ff bf79 	b.w	8000974 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000a82:	2101      	movs	r1, #1
 8000a84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a88:	f7ff ff74 	bl	8000974 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000a90:	2100      	movs	r1, #0
 8000a92:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a96:	f7ff bf6d 	b.w	8000974 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aa0:	f7ff ff68 	bl	8000974 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aae:	f7ff bf61 	b.w	8000974 <RCC_APB1PeriphResetCmd>
 8000ab2:	bf00      	nop
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40004800 	.word	0x40004800
 8000ac0:	40004c00 	.word	0x40004c00
 8000ac4:	40005000 	.word	0x40005000

08000ac8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ace:	8a03      	ldrh	r3, [r0, #16]
 8000ad0:	88ca      	ldrh	r2, [r1, #6]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ad8:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ada:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000adc:	8982      	ldrh	r2, [r0, #12]
 8000ade:	890b      	ldrh	r3, [r1, #8]
 8000ae0:	8888      	ldrh	r0, [r1, #4]
 8000ae2:	b292      	uxth	r2, r2
 8000ae4:	8949      	ldrh	r1, [r1, #10]
 8000ae6:	4303      	orrs	r3, r0
 8000ae8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000aec:	430b      	orrs	r3, r1
 8000aee:	f022 020c 	bic.w	r2, r2, #12
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000af6:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000af8:	8aa3      	ldrh	r3, [r4, #20]
 8000afa:	89aa      	ldrh	r2, [r5, #12]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b02:	b087      	sub	sp, #28
 8000b04:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b06:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b08:	a801      	add	r0, sp, #4
 8000b0a:	f7ff fea7 	bl	800085c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b0e:	9904      	ldr	r1, [sp, #16]
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8000b10:	481a      	ldr	r0, [pc, #104]	; (8000b7c <USART_Init+0xb4>)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b12:	9b03      	ldr	r3, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b14:	89a2      	ldrh	r2, [r4, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b16:	4284      	cmp	r4, r0
 8000b18:	bf08      	it	eq
 8000b1a:	460b      	moveq	r3, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b1c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000b20:	682a      	ldr	r2, [r5, #0]
 8000b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b26:	bf14      	ite	ne
 8000b28:	0052      	lslne	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000b2a:	0092      	lsleq	r2, r2, #2
 8000b2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b30:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b34:	4d12      	ldr	r5, [pc, #72]	; (8000b80 <USART_Init+0xb8>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b36:	89a1      	ldrh	r1, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b38:	fba5 2003 	umull	r2, r0, r5, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b3c:	2264      	movs	r2, #100	; 0x64
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b3e:	0940      	lsrs	r0, r0, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b40:	fb00 3312 	mls	r3, r0, r2, r3

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b44:	040a      	lsls	r2, r1, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b46:	ea4f 1000 	mov.w	r0, r0, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b4a:	d40a      	bmi.n	8000b62 <USART_Init+0x9a>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000b4c:	011a      	lsls	r2, r3, #4
 8000b4e:	3232      	adds	r2, #50	; 0x32
 8000b50:	fba5 2302 	umull	r2, r3, r5, r2
 8000b54:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8000b58:	4303      	orrs	r3, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	8123      	strh	r3, [r4, #8]
}
 8000b5e:	b007      	add	sp, #28
 8000b60:	bd30      	pop	{r4, r5, pc}
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000b62:	00d9      	lsls	r1, r3, #3
 8000b64:	3132      	adds	r1, #50	; 0x32
 8000b66:	fba5 3101 	umull	r3, r1, r5, r1
 8000b6a:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8000b6e:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	8123      	strh	r3, [r4, #8]
}
 8000b76:	b007      	add	sp, #28
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	51eb851f 	.word	0x51eb851f

08000b84 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000b84:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000b86:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000b8a:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000b8c:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000b8e:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000b90:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000b92:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000b94:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000b96:	8183      	strh	r3, [r0, #12]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000b9c:	b430      	push	{r4, r5}
 8000b9e:	884b      	ldrh	r3, [r1, #2]
 8000ba0:	880d      	ldrh	r5, [r1, #0]
 8000ba2:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ba4:	8a02      	ldrh	r2, [r0, #16]
 8000ba6:	432b      	orrs	r3, r5
 8000ba8:	88c9      	ldrh	r1, [r1, #6]
 8000baa:	4323      	orrs	r3, r4
 8000bac:	b292      	uxth	r2, r2
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b29b      	uxth	r3, r3
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000bb8:	8203      	strh	r3, [r0, #16]
}
 8000bba:	bc30      	pop	{r4, r5}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000bc4:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000bc6:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000bc8:	80c3      	strh	r3, [r0, #6]
 8000bca:	4770      	bx	lr

08000bcc <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000bcc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bce:	b929      	cbnz	r1, 8000bdc <USART_Cmd+0x10>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	0c1b      	lsrs	r3, r3, #16
 8000bd8:	8183      	strh	r3, [r0, #12]
 8000bda:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be2:	8183      	strh	r3, [r0, #12]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000be8:	b410      	push	{r4}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000bea:	f001 041f 	and.w	r4, r1, #31
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bee:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000bf2:	2301      	movs	r3, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bf4:	2901      	cmp	r1, #1
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000bf6:	fa03 f304 	lsl.w	r3, r3, r4
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bfa:	d00f      	beq.n	8000c1c <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000bfc:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8000bfe:	bf0c      	ite	eq
 8000c00:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000c02:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8000c04:	b92a      	cbnz	r2, 8000c12 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c06:	6802      	ldr	r2, [r0, #0]
  }
}
 8000c08:	bc10      	pop	{r4}
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c0a:	ea22 0303 	bic.w	r3, r2, r3
 8000c0e:	6003      	str	r3, [r0, #0]
  }
}
 8000c10:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c12:	6802      	ldr	r2, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c14:	bc10      	pop	{r4}
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c16:	4313      	orrs	r3, r2
 8000c18:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c1a:	4770      	bx	lr
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8000c1c:	300c      	adds	r0, #12
 8000c1e:	e7f1      	b.n	8000c04 <USART_ITConfig+0x1c>

08000c20 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000c20:	8a83      	ldrh	r3, [r0, #20]
 8000c22:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8000c24:	b91a      	cbnz	r2, 8000c2e <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000c26:	ea23 0101 	bic.w	r1, r3, r1
 8000c2a:	8281      	strh	r1, [r0, #20]
 8000c2c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000c2e:	4319      	orrs	r1, r3
 8000c30:	8281      	strh	r1, [r0, #20]
 8000c32:	4770      	bx	lr

08000c34 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8000c34:	8a03      	ldrh	r3, [r0, #16]
 8000c36:	f023 030f 	bic.w	r3, r3, #15
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000c40:	8a03      	ldrh	r3, [r0, #16]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4319      	orrs	r1, r3
 8000c46:	8201      	strh	r1, [r0, #16]
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8000c4c:	8983      	ldrh	r3, [r0, #12]
 8000c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	0c1b      	lsrs	r3, r3, #16
 8000c56:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000c58:	8983      	ldrh	r3, [r0, #12]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	8181      	strh	r1, [r0, #12]
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8000c64:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000c66:	b929      	cbnz	r1, 8000c74 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= CR1_RWU_Set;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8000c68:	f023 0302 	bic.w	r3, r3, #2
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	0c1b      	lsrs	r3, r3, #16
 8000c70:	8183      	strh	r3, [r0, #12]
 8000c72:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	8183      	strh	r3, [r0, #12]
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8000c80:	8a03      	ldrh	r3, [r0, #16]
 8000c82:	f023 0320 	bic.w	r3, r3, #32
 8000c86:	041b      	lsls	r3, r3, #16
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000c8c:	8a03      	ldrh	r3, [r0, #16]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4319      	orrs	r1, r3
 8000c92:	8201      	strh	r1, [r0, #16]
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8000c98:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c9a:	b929      	cbnz	r1, 8000ca8 <USART_LINCmd+0x10>
    USARTx->CR2 |= CR2_LINEN_Set;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8000c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ca0:	041b      	lsls	r3, r3, #16
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	8203      	strh	r3, [r0, #16]
 8000ca6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cae:	8203      	strh	r3, [r0, #16]
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000cb4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000cb8:	8081      	strh	r1, [r0, #4]
 8000cba:	4770      	bx	lr

08000cbc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000cbc:	8880      	ldrh	r0, [r0, #4]
}
 8000cbe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000cc2:	4770      	bx	lr

08000cc4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8000cc4:	8983      	ldrh	r3, [r0, #12]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	8183      	strh	r3, [r0, #12]
 8000cce:	4770      	bx	lr

08000cd0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8000cd0:	8b03      	ldrh	r3, [r0, #24]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000cd6:	8b03      	ldrh	r3, [r0, #24]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000cde:	8301      	strh	r1, [r0, #24]
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8000ce4:	8b03      	ldrh	r3, [r0, #24]
 8000ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000cea:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000cec:	8b03      	ldrh	r3, [r0, #24]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	8301      	strh	r1, [r0, #24]
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8000cf8:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cfa:	b929      	cbnz	r1, 8000d08 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= CR3_SCEN_Set;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8000cfc:	f023 0320 	bic.w	r3, r3, #32
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	8283      	strh	r3, [r0, #20]
 8000d06:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	8283      	strh	r3, [r0, #20]
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8000d14:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d16:	b929      	cbnz	r1, 8000d24 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= CR3_NACK_Set;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8000d18:	f023 0310 	bic.w	r3, r3, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c1b      	lsrs	r3, r3, #16
 8000d20:	8283      	strh	r3, [r0, #20]
 8000d22:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	8283      	strh	r3, [r0, #20]
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8000d30:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d32:	b929      	cbnz	r1, 8000d40 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= CR3_HDSEL_Set;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8000d34:	f023 0308 	bic.w	r3, r3, #8
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	8283      	strh	r3, [r0, #20]
 8000d3e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	8283      	strh	r3, [r0, #20]
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8000d4c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d4e:	b919      	cbnz	r1, 8000d58 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= CR1_OVER8_Set;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 8000d50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d54:	8183      	strh	r3, [r0, #12]
 8000d56:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8000d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	8183      	strh	r3, [r0, #12]
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 8000d68:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d6a:	b929      	cbnz	r1, 8000d78 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= CR3_ONEBITE_Set;
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8000d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c1b      	lsrs	r3, r3, #16
 8000d74:	8283      	strh	r3, [r0, #20]
 8000d76:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7e:	8283      	strh	r3, [r0, #20]
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8000d84:	8a83      	ldrh	r3, [r0, #20]
 8000d86:	f023 0304 	bic.w	r3, r3, #4
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	0c1b      	lsrs	r3, r3, #16
 8000d8e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8000d90:	8a83      	ldrh	r3, [r0, #20]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4319      	orrs	r1, r3
 8000d96:	8281      	strh	r1, [r0, #20]
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8000d9c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8000d9e:	b929      	cbnz	r1, 8000dac <USART_IrDACmd+0x10>
    USARTx->CR3 |= CR3_IREN_Set;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8000da0:	f023 0302 	bic.w	r3, r3, #2
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	0c1b      	lsrs	r3, r3, #16
 8000da8:	8283      	strh	r3, [r0, #20]
 8000daa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	8283      	strh	r3, [r0, #20]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000db8:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8000dba:	4219      	tst	r1, r3
}
 8000dbc:	bf14      	ite	ne
 8000dbe:	2001      	movne	r0, #1
 8000dc0:	2000      	moveq	r0, #0
 8000dc2:	4770      	bx	lr

08000dc4 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000dc4:	43c9      	mvns	r1, r1
 8000dc6:	b289      	uxth	r1, r1
 8000dc8:	8001      	strh	r1, [r0, #0]
 8000dca:	4770      	bx	lr

08000dcc <USART_GetITStatus>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000dcc:	f3c1 1242 	ubfx	r2, r1, #5, #3
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000dd0:	b410      	push	{r4}
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8000dd2:	2301      	movs	r3, #1
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000dd4:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dd8:	2a01      	cmp	r2, #1
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8000dda:	fa03 f304 	lsl.w	r3, r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dde:	d015      	beq.n	8000e0c <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000de0:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 8000de2:	bf0c      	ite	eq
 8000de4:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000de6:	8a82      	ldrhne	r2, [r0, #20]
 8000de8:	b292      	uxth	r2, r2
 8000dea:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8000dec:	8802      	ldrh	r2, [r0, #0]
 8000dee:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000df0:	b14b      	cbz	r3, 8000e06 <USART_GetITStatus+0x3a>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8000df2:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8000df4:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8000df6:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000dfa:	420a      	tst	r2, r1
 8000dfc:	bf14      	ite	ne
 8000dfe:	4618      	movne	r0, r3
 8000e00:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8000e02:	bc10      	pop	{r4}
 8000e04:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000e06:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8000e08:	bc10      	pop	{r4}
 8000e0a:	4770      	bx	lr
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8000e0c:	8982      	ldrh	r2, [r0, #12]
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	e7eb      	b.n	8000dec <USART_GetITStatus+0x20>

08000e14 <USART_ClearITPendingBit>:
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 8000e14:	0a09      	lsrs	r1, r1, #8
 8000e16:	2301      	movs	r3, #1
 8000e18:	fa03 f101 	lsl.w	r1, r3, r1
 8000e1c:	43c9      	mvns	r1, r1
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	8001      	strh	r1, [r0, #0]
 8000e22:	4770      	bx	lr

08000e24 <DelayXms.part.0>:
	if(ms == 0)
		return;
	
	ms &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = ms * MsCount;								//装载数据
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <DelayXms.part.0+0x30>)
 8000e26:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <DelayXms.part.0+0x34>)
	SysTick->VAL = 0;
	SysTick->CTRL = 1;											//使能倒计数器
	
	do
	{
		ctrlResult = SysTick->CTRL;
 8000e28:	4619      	mov	r1, r3
	if(ms == 0)
		return;
	
	ms &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = ms * MsCount;								//装载数据
 8000e2a:	8812      	ldrh	r2, [r2, #0]
*	返回参数：	无
*
*	说明：		
************************************************************
*/
void DelayXms(unsigned short ms)
 8000e2c:	b410      	push	{r4}
	if(ms == 0)
		return;
	
	ms &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = ms * MsCount;								//装载数据
 8000e2e:	fb00 f002 	mul.w	r0, r0, r2
	SysTick->VAL = 0;
 8000e32:	2400      	movs	r4, #0
	SysTick->CTRL = 1;											//使能倒计数器
 8000e34:	2201      	movs	r2, #1
	if(ms == 0)
		return;
	
	ms &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = ms * MsCount;								//装载数据
 8000e36:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
 8000e38:	609c      	str	r4, [r3, #8]
	SysTick->CTRL = 1;											//使能倒计数器
 8000e3a:	601a      	str	r2, [r3, #0]
	
	do
	{
		ctrlResult = SysTick->CTRL;
 8000e3c:	680b      	ldr	r3, [r1, #0]
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <DelayXms.part.0+0x30>)
	}
	while((ctrlResult & 0x01) && !(ctrlResult & (1 << 16)));	//保证在运行、检查是否倒计数到0
 8000e40:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d0f9      	beq.n	8000e3c <DelayXms.part.0+0x18>
	
	SysTick->CTRL = 0;											//关闭倒计数器
 8000e48:	2300      	movs	r3, #0
 8000e4a:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0;

}
 8000e4c:	bc10      	pop	{r4}
		ctrlResult = SysTick->CTRL;
	}
	while((ctrlResult & 0x01) && !(ctrlResult & (1 << 16)));	//保证在运行、检查是否倒计数到0
	
	SysTick->CTRL = 0;											//关闭倒计数器
	SysTick->VAL = 0;
 8000e4e:	6093      	str	r3, [r2, #8]

}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010
 8000e58:	20000092 	.word	0x20000092

08000e5c <Delay_Init>:
*
*	说明：		
************************************************************
*/
void Delay_Init(void)
{
 8000e5c:	b410      	push	{r4}

	SysTick->CTRL &= ~(1 << 2);		//选择时钟为HCLK(72MHz)/8		103--9MHz
	
	UsCount = 9;					//微秒级延时系数
	
	MsCount = UsCount * 1000;		//毫秒级延时系数
 8000e5e:	f242 3428 	movw	r4, #9000	; 0x2328
************************************************************
*/
void Delay_Init(void)
{

	SysTick->CTRL &= ~(1 << 2);		//选择时钟为HCLK(72MHz)/8		103--9MHz
 8000e62:	4905      	ldr	r1, [pc, #20]	; (8000e78 <Delay_Init+0x1c>)
	
	UsCount = 9;					//微秒级延时系数
 8000e64:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <Delay_Init+0x20>)
************************************************************
*/
void Delay_Init(void)
{

	SysTick->CTRL &= ~(1 << 2);		//选择时钟为HCLK(72MHz)/8		103--9MHz
 8000e66:	680b      	ldr	r3, [r1, #0]
	
	UsCount = 9;					//微秒级延时系数
 8000e68:	2009      	movs	r0, #9
************************************************************
*/
void Delay_Init(void)
{

	SysTick->CTRL &= ~(1 << 2);		//选择时钟为HCLK(72MHz)/8		103--9MHz
 8000e6a:	f023 0304 	bic.w	r3, r3, #4
 8000e6e:	600b      	str	r3, [r1, #0]
	
	UsCount = 9;					//微秒级延时系数
 8000e70:	7090      	strb	r0, [r2, #2]
	
	MsCount = UsCount * 1000;		//毫秒级延时系数
 8000e72:	8014      	strh	r4, [r2, #0]

}
 8000e74:	bc10      	pop	{r4}
 8000e76:	4770      	bx	lr
 8000e78:	e000e010 	.word	0xe000e010
 8000e7c:	20000092 	.word	0x20000092

08000e80 <DelayUs>:

	unsigned int ctrlResult = 0;
	
	us &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = us * UsCount;								//装载数据
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <DelayUs+0x30>)
*
*	说明：		此时钟(21MHz)最大延时798915us
************************************************************
*/
void DelayUs(unsigned short us)
{
 8000e82:	b410      	push	{r4}
	SysTick->VAL = 0;
	SysTick->CTRL = 1;											//使能倒计数器
	
	do
	{
		ctrlResult = SysTick->CTRL;
 8000e84:	4619      	mov	r1, r3

	unsigned int ctrlResult = 0;
	
	us &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = us * UsCount;								//装载数据
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <DelayUs+0x34>)
	SysTick->VAL = 0;
 8000e88:	2400      	movs	r4, #0

	unsigned int ctrlResult = 0;
	
	us &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = us * UsCount;								//装载数据
 8000e8a:	7892      	ldrb	r2, [r2, #2]
 8000e8c:	fb00 f002 	mul.w	r0, r0, r2
	SysTick->VAL = 0;
	SysTick->CTRL = 1;											//使能倒计数器
 8000e90:	2201      	movs	r2, #1

	unsigned int ctrlResult = 0;
	
	us &= 0x00FFFFFF;											//取低24位
	
	SysTick->LOAD = us * UsCount;								//装载数据
 8000e92:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
 8000e94:	609c      	str	r4, [r3, #8]
	SysTick->CTRL = 1;											//使能倒计数器
 8000e96:	601a      	str	r2, [r3, #0]
	
	do
	{
		ctrlResult = SysTick->CTRL;
 8000e98:	680b      	ldr	r3, [r1, #0]
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <DelayUs+0x30>)
	}
	while((ctrlResult & 0x01) && !(ctrlResult & (1 << 16)));	//保证在运行、检查是否倒计数到0
 8000e9c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d0f9      	beq.n	8000e98 <DelayUs+0x18>
	
	SysTick->CTRL = 0;											//关闭倒计数器
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0;

}
 8000ea8:	bc10      	pop	{r4}
		ctrlResult = SysTick->CTRL;
	}
	while((ctrlResult & 0x01) && !(ctrlResult & (1 << 16)));	//保证在运行、检查是否倒计数到0
	
	SysTick->CTRL = 0;											//关闭倒计数器
	SysTick->VAL = 0;
 8000eaa:	6093      	str	r3, [r2, #8]

}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010
 8000eb4:	20000092 	.word	0x20000092

08000eb8 <DelayXms>:
void DelayXms(unsigned short ms)
{

	unsigned int ctrlResult = 0;
	
	if(ms == 0)
 8000eb8:	b100      	cbz	r0, 8000ebc <DelayXms+0x4>
 8000eba:	e7b3      	b.n	8000e24 <DelayXms.part.0>
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <DelayMs>:
*
*	说明：		多次调用DelayXms，做到长延时
************************************************************
*/
void DelayMs(unsigned short ms)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}

	unsigned char repeat = 0;
	unsigned short remain = 0;
	
	repeat = ms / 500;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <DelayMs+0x38>)
	remain = ms % 500;
 8000ec4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
{

	unsigned char repeat = 0;
	unsigned short remain = 0;
	
	repeat = ms / 500;
 8000ec8:	fba3 1300 	umull	r1, r3, r3, r0
 8000ecc:	095b      	lsrs	r3, r3, #5
	remain = ms % 500;
 8000ece:	fb02 0513 	mls	r5, r2, r3, r0
{

	unsigned char repeat = 0;
	unsigned short remain = 0;
	
	repeat = ms / 500;
 8000ed2:	b29b      	uxth	r3, r3
	remain = ms % 500;
 8000ed4:	b2ad      	uxth	r5, r5
 8000ed6:	b2dc      	uxtb	r4, r3
	
	while(repeat)
 8000ed8:	b13b      	cbz	r3, 8000eea <DelayMs+0x2a>
 8000eda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ede:	f7ff ffa1 	bl	8000e24 <DelayXms.part.0>
	{
		DelayXms(500);
		repeat--;
 8000ee2:	1e63      	subs	r3, r4, #1
	unsigned short remain = 0;
	
	repeat = ms / 500;
	remain = ms % 500;
	
	while(repeat)
 8000ee4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000ee8:	d1f7      	bne.n	8000eda <DelayMs+0x1a>
	{
		DelayXms(500);
		repeat--;
	}
	
	if(remain)
 8000eea:	b11d      	cbz	r5, 8000ef4 <DelayMs+0x34>
 8000eec:	4628      	mov	r0, r5
		DelayXms(remain);

}
 8000eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef2:	e797      	b.n	8000e24 <DelayXms.part.0>
 8000ef4:	bd38      	pop	{r3, r4, r5, pc}
 8000ef6:	bf00      	nop
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <Usart1_Init>:
*
*	说明：		TX-PA9		RX-PA10
************************************************************
*/
void Usart1_Init(unsigned int baud)
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	4607      	mov	r7, r0
 8000f00:	b087      	sub	sp, #28
	
	//PA9	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;										//设置为复用模式
	gpioInitStruct.GPIO_Pin = GPIO_Pin_9;											//初始化Pin9
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
 8000f02:	4e28      	ldr	r6, [pc, #160]	; (8000fa4 <Usart1_Init+0xa8>)

	GPIO_InitTypeDef gpioInitStruct;
	USART_InitTypeDef usartInitStruct;
	NVIC_InitTypeDef nvicInitStruct;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);							//打开GPIOA的时钟
 8000f04:	2101      	movs	r1, #1
 8000f06:	2004      	movs	r0, #4
 8000f08:	f7ff fd0a 	bl	8000920 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);							//打开USART1的时钟
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f12:	f7ff fd05 	bl	8000920 <RCC_APB2PeriphClockCmd>
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
	USART_Init(USART1, &usartInitStruct);
 8000f16:	4d24      	ldr	r5, [pc, #144]	; (8000fa8 <Usart1_Init+0xac>)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);							//打开USART1的时钟
	
	//PA9	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;										//设置为复用模式
	gpioInitStruct.GPIO_Pin = GPIO_Pin_9;											//初始化Pin9
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
 8000f18:	2403      	movs	r4, #3
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	4669      	mov	r1, sp
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);							//打开GPIOA的时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);							//打开USART1的时钟
	
	//PA9	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;										//设置为复用模式
 8000f1e:	2218      	movs	r2, #24
	gpioInitStruct.GPIO_Pin = GPIO_Pin_9;											//初始化Pin9
 8000f20:	f44f 7300 	mov.w	r3, #512	; 0x200
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);							//打开GPIOA的时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);							//打开USART1的时钟
	
	//PA9	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;										//设置为复用模式
 8000f24:	f88d 2003 	strb.w	r2, [sp, #3]
	gpioInitStruct.GPIO_Pin = GPIO_Pin_9;											//初始化Pin9
 8000f28:	f8ad 3000 	strh.w	r3, [sp]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
 8000f2c:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
 8000f30:	f7ff faba 	bl	80004a8 <GPIO_Init>
	
	//PA10	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
 8000f34:	2204      	movs	r2, #4
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
 8000f36:	4669      	mov	r1, sp
 8000f38:	4630      	mov	r0, r6
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	//PA10	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
 8000f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	gpioInitStruct.GPIO_Pin = GPIO_Pin_9;											//初始化Pin9
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	//PA10	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
 8000f3e:	f88d 2003 	strb.w	r2, [sp, #3]
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
 8000f42:	f88d 4002 	strb.w	r4, [sp, #2]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	//PA10	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
 8000f46:	f8ad 3000 	strh.w	r3, [sp]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
 8000f4a:	2400      	movs	r4, #0
	
	//PA10	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
 8000f4c:	f7ff faac 	bl	80004a8 <GPIO_Init>
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
 8000f50:	230c      	movs	r3, #12
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
	USART_Init(USART1, &usartInitStruct);
 8000f52:	4628      	mov	r0, r5
 8000f54:	a902      	add	r1, sp, #8
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
 8000f56:	f8ad 3012 	strh.w	r3, [sp, #18]
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;								//设置为浮空输入
	gpioInitStruct.GPIO_Pin = GPIO_Pin_10;											//初始化Pin10
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;									//承载的最大频率
	GPIO_Init(GPIOA, &gpioInitStruct);												//初始化GPIOA
	
	usartInitStruct.USART_BaudRate = baud;
 8000f5a:	9702      	str	r7, [sp, #8]
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
 8000f5c:	f8ad 4014 	strh.w	r4, [sp, #20]
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
 8000f60:	f8ad 4010 	strh.w	r4, [sp, #16]
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
 8000f64:	f8ad 400e 	strh.w	r4, [sp, #14]
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
 8000f68:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_Init(USART1, &usartInitStruct);
 8000f6c:	f7ff fdac 	bl	8000ac8 <USART_Init>
	
	USART_Cmd(USART1, ENABLE);														//使能串口
 8000f70:	4628      	mov	r0, r5
 8000f72:	2101      	movs	r1, #1
 8000f74:	f7ff fe2a 	bl	8000bcc <USART_Cmd>
	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);									//使能接收中断
 8000f78:	4628      	mov	r0, r5
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f240 5125 	movw	r1, #1317	; 0x525
 8000f80:	f7ff fe32 	bl	8000be8 <USART_ITConfig>
	
	nvicInitStruct.NVIC_IRQChannel = USART1_IRQn;									//usart1中断号
 8000f84:	2125      	movs	r1, #37	; 0x25
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;										//中断通道使能
 8000f86:	2201      	movs	r2, #1
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;							//抢占中断优先级(值越小优先级越高)
	nvicInitStruct.NVIC_IRQChannelSubPriority = 2;									//子中断优先级(值越小优先级越高)
 8000f88:	2302      	movs	r3, #2
	NVIC_Init(&nvicInitStruct);														//初始化NVIC
 8000f8a:	a801      	add	r0, sp, #4
	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);									//使能接收中断
	
	nvicInitStruct.NVIC_IRQChannel = USART1_IRQn;									//usart1中断号
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;										//中断通道使能
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;							//抢占中断优先级(值越小优先级越高)
 8000f8c:	f88d 4005 	strb.w	r4, [sp, #5]
	
	USART_Cmd(USART1, ENABLE);														//使能串口
	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);									//使能接收中断
	
	nvicInitStruct.NVIC_IRQChannel = USART1_IRQn;									//usart1中断号
 8000f90:	f88d 1004 	strb.w	r1, [sp, #4]
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;										//中断通道使能
 8000f94:	f88d 2007 	strb.w	r2, [sp, #7]
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;							//抢占中断优先级(值越小优先级越高)
	nvicInitStruct.NVIC_IRQChannelSubPriority = 2;									//子中断优先级(值越小优先级越高)
 8000f98:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_Init(&nvicInitStruct);														//初始化NVIC
 8000f9c:	f7ff f9b2 	bl	8000304 <NVIC_Init>

}
 8000fa0:	b007      	add	sp, #28
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40013800 	.word	0x40013800

08000fac <Usart2_Init>:
*
*	说明：		TX-PA2		RX-PA3
************************************************************
*/
void Usart2_Init(unsigned int baud)
{
 8000fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	b086      	sub	sp, #24
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
 8000fb4:	4f27      	ldr	r7, [pc, #156]	; (8001054 <Usart2_Init+0xa8>)

	GPIO_InitTypeDef gpioInitStruct;
	USART_InitTypeDef usartInitStruct;
	NVIC_InitTypeDef nvicInitStruct;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff fcb1 	bl	8000920 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fc4:	f7ff fcba 	bl	800093c <RCC_APB1PeriphClockCmd>
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
 8000fc8:	2604      	movs	r6, #4
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
	USART_Init(USART2, &usartInitStruct);
 8000fca:	4d23      	ldr	r5, [pc, #140]	; (8001058 <Usart2_Init+0xac>)
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
 8000fcc:	4638      	mov	r0, r7
 8000fce:	4669      	mov	r1, sp
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8000fd0:	2318      	movs	r3, #24
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000fd2:	2403      	movs	r4, #3
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8000fd4:	f88d 3003 	strb.w	r3, [sp, #3]
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000fd8:	f88d 4002 	strb.w	r4, [sp, #2]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	
	//PA2	TXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
 8000fdc:	f8ad 6000 	strh.w	r6, [sp]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
 8000fe0:	f7ff fa62 	bl	80004a8 <GPIO_Init>
	
	//PA3	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
 8000fe4:	4669      	mov	r1, sp
 8000fe6:	4638      	mov	r0, r7
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	//PA3	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
 8000fe8:	2308      	movs	r3, #8
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000fea:	f88d 4002 	strb.w	r4, [sp, #2]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	//PA3	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
 8000fee:	f8ad 3000 	strh.w	r3, [sp]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
 8000ff2:	2400      	movs	r4, #0
	gpioInitStruct.GPIO_Pin = GPIO_Pin_2;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	//PA3	RXD
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ff4:	f88d 6003 	strb.w	r6, [sp, #3]
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
 8000ff8:	f7ff fa56 	bl	80004a8 <GPIO_Init>
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
 8000ffc:	230c      	movs	r3, #12
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
	USART_Init(USART2, &usartInitStruct);
 8000ffe:	4628      	mov	r0, r5
 8001000:	a902      	add	r1, sp, #8
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	usartInitStruct.USART_BaudRate = baud;
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
 8001002:	f8ad 3012 	strh.w	r3, [sp, #18]
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &gpioInitStruct);
	
	usartInitStruct.USART_BaudRate = baud;
 8001006:	f8cd 8008 	str.w	r8, [sp, #8]
	usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;		//无硬件流控
 800100a:	f8ad 4014 	strh.w	r4, [sp, #20]
	usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;						//接收和发送
	usartInitStruct.USART_Parity = USART_Parity_No;									//无校验
 800100e:	f8ad 4010 	strh.w	r4, [sp, #16]
	usartInitStruct.USART_StopBits = USART_StopBits_1;								//1位停止位
 8001012:	f8ad 400e 	strh.w	r4, [sp, #14]
	usartInitStruct.USART_WordLength = USART_WordLength_8b;							//8位数据位
 8001016:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_Init(USART2, &usartInitStruct);
 800101a:	f7ff fd55 	bl	8000ac8 <USART_Init>
	
	USART_Cmd(USART2, ENABLE);														//使能串口
 800101e:	4628      	mov	r0, r5
 8001020:	2101      	movs	r1, #1
 8001022:	f7ff fdd3 	bl	8000bcc <USART_Cmd>
	
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);									//使能接收中断
 8001026:	4628      	mov	r0, r5
 8001028:	f240 5125 	movw	r1, #1317	; 0x525
 800102c:	2201      	movs	r2, #1
 800102e:	f7ff fddb 	bl	8000be8 <USART_ITConfig>
	
	nvicInitStruct.NVIC_IRQChannel = USART2_IRQn;
 8001032:	2226      	movs	r2, #38	; 0x26
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001034:	2301      	movs	r3, #1
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&nvicInitStruct);
 8001036:	eb0d 0006 	add.w	r0, sp, r6
	
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);									//使能接收中断
	
	nvicInitStruct.NVIC_IRQChannel = USART2_IRQn;
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800103a:	f88d 4005 	strb.w	r4, [sp, #5]
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
 800103e:	f88d 4006 	strb.w	r4, [sp, #6]
	
	USART_Cmd(USART2, ENABLE);														//使能串口
	
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);									//使能接收中断
	
	nvicInitStruct.NVIC_IRQChannel = USART2_IRQn;
 8001042:	f88d 2004 	strb.w	r2, [sp, #4]
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001046:	f88d 3007 	strb.w	r3, [sp, #7]
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&nvicInitStruct);
 800104a:	f7ff f95b 	bl	8000304 <NVIC_Init>

}
 800104e:	b006      	add	sp, #24
 8001050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001054:	40010800 	.word	0x40010800
 8001058:	40004400 	.word	0x40004400

0800105c <Usart_SendString>:
void Usart_SendString(USART_TypeDef *USARTx, unsigned char *str, unsigned short len)
{

	unsigned short count = 0;
	
	for(; count < len; count++)
 800105c:	b19a      	cbz	r2, 8001086 <Usart_SendString+0x2a>
*
*	说明：		
************************************************************
*/
void Usart_SendString(USART_TypeDef *USARTx, unsigned char *str, unsigned short len)
{
 800105e:	b570      	push	{r4, r5, r6, lr}
 8001060:	4604      	mov	r4, r0
 8001062:	1e56      	subs	r6, r2, #1
 8001064:	b2b6      	uxth	r6, r6
 8001066:	440e      	add	r6, r1
 8001068:	1e4d      	subs	r5, r1, #1

	unsigned short count = 0;
	
	for(; count < len; count++)
	{
		USART_SendData(USARTx, *str++);									//发送数据
 800106a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fe20 	bl	8000cb4 <USART_SendData>
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);		//等待发送完成
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4620      	mov	r0, r4
 8001078:	f7ff fe9e 	bl	8000db8 <USART_GetFlagStatus>
 800107c:	2800      	cmp	r0, #0
 800107e:	d0f9      	beq.n	8001074 <Usart_SendString+0x18>
void Usart_SendString(USART_TypeDef *USARTx, unsigned char *str, unsigned short len)
{

	unsigned short count = 0;
	
	for(; count < len; count++)
 8001080:	42b5      	cmp	r5, r6
 8001082:	d1f2      	bne.n	800106a <Usart_SendString+0xe>
 8001084:	bd70      	pop	{r4, r5, r6, pc}
 8001086:	4770      	bx	lr

08001088 <UsartPrintf>:
*
*	说明：		
************************************************************
*/
void UsartPrintf(USART_TypeDef *USARTx, char *fmt,...)
{
 8001088:	b40e      	push	{r1, r2, r3}
 800108a:	b530      	push	{r4, r5, lr}
 800108c:	b0cc      	sub	sp, #304	; 0x130
 800108e:	4604      	mov	r4, r0
	unsigned char UsartPrintfBuf[296];
	va_list ap;
	unsigned char *pStr = UsartPrintfBuf;
	
	va_start(ap, fmt);
	vsprintf((char *)UsartPrintfBuf, fmt, ap);							//格式化
 8001090:	a802      	add	r0, sp, #8
 8001092:	4605      	mov	r5, r0
*
*	说明：		
************************************************************
*/
void UsartPrintf(USART_TypeDef *USARTx, char *fmt,...)
{
 8001094:	ab4f      	add	r3, sp, #316	; 0x13c
 8001096:	f853 1b04 	ldr.w	r1, [r3], #4
	unsigned char UsartPrintfBuf[296];
	va_list ap;
	unsigned char *pStr = UsartPrintfBuf;
	
	va_start(ap, fmt);
	vsprintf((char *)UsartPrintfBuf, fmt, ap);							//格式化
 800109a:	461a      	mov	r2, r3

	unsigned char UsartPrintfBuf[296];
	va_list ap;
	unsigned char *pStr = UsartPrintfBuf;
	
	va_start(ap, fmt);
 800109c:	9301      	str	r3, [sp, #4]
	vsprintf((char *)UsartPrintfBuf, fmt, ap);							//格式化
 800109e:	f000 f9a1 	bl	80013e4 <vsiprintf>
	va_end(ap);
	
	while(*pStr != 0)
 80010a2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80010a6:	b161      	cbz	r1, 80010c2 <UsartPrintf+0x3a>
	{
		USART_SendData(USARTx, *pStr++);
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff fe03 	bl	8000cb4 <USART_SendData>
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff fe81 	bl	8000db8 <USART_GetFlagStatus>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d0f9      	beq.n	80010ae <UsartPrintf+0x26>
	
	va_start(ap, fmt);
	vsprintf((char *)UsartPrintfBuf, fmt, ap);							//格式化
	va_end(ap);
	
	while(*pStr != 0)
 80010ba:	f815 1b01 	ldrb.w	r1, [r5], #1
 80010be:	2900      	cmp	r1, #0
 80010c0:	d1f2      	bne.n	80010a8 <UsartPrintf+0x20>
	{
		USART_SendData(USARTx, *pStr++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
	}

}
 80010c2:	b04c      	add	sp, #304	; 0x130
 80010c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010c8:	b003      	add	sp, #12
 80010ca:	4770      	bx	lr

080010cc <USART1_IRQHandler>:
*
*	说明：		
************************************************************
*/
void USART1_IRQHandler(void)
{
 80010cc:	b510      	push	{r4, lr}

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)	//接收中断
 80010ce:	f240 5125 	movw	r1, #1317	; 0x525
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <USART1_IRQHandler+0x38>)
 80010d4:	f7ff fe7a 	bl	8000dcc <USART_GetITStatus>
 80010d8:	b190      	cbz	r0, 8001100 <USART1_IRQHandler+0x34>
	{
		if(usart1Len >= 64)									//防止数据过多，导致内存溢出
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <USART1_IRQHandler+0x3c>)
			usart1Len = 0;
		usart1Buf[usart1Len++] = USART1->DR;
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <USART1_IRQHandler+0x38>)
void USART1_IRQHandler(void)
{

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)	//接收中断
	{
		if(usart1Len >= 64)									//防止数据过多，导致内存溢出
 80010de:	7813      	ldrb	r3, [r2, #0]
 80010e0:	2b3f      	cmp	r3, #63	; 0x3f
 80010e2:	bf9a      	itte	ls
 80010e4:	1c59      	addls	r1, r3, #1
 80010e6:	b2c9      	uxtbls	r1, r1
 80010e8:	2101      	movhi	r1, #1
			usart1Len = 0;
		usart1Buf[usart1Len++] = USART1->DR;
 80010ea:	7011      	strb	r1, [r2, #0]
 80010ec:	8884      	ldrh	r4, [r0, #4]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <USART1_IRQHandler+0x40>)
 80010f0:	bf88      	it	hi
 80010f2:	2300      	movhi	r3, #0
 80010f4:	54d4      	strb	r4, [r2, r3]
		
		USART_ClearFlag(USART1, USART_FLAG_RXNE);
 80010f6:	2120      	movs	r1, #32
	}

}
 80010f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{
		if(usart1Len >= 64)									//防止数据过多，导致内存溢出
			usart1Len = 0;
		usart1Buf[usart1Len++] = USART1->DR;
		
		USART_ClearFlag(USART1, USART_FLAG_RXNE);
 80010fc:	f7ff be62 	b.w	8000dc4 <USART_ClearFlag>
 8001100:	bd10      	pop	{r4, pc}
 8001102:	bf00      	nop
 8001104:	40013800 	.word	0x40013800
 8001108:	20000090 	.word	0x20000090
 800110c:	200000a4 	.word	0x200000a4

08001110 <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
 8001110:	f3ef 8009 	mrs	r0, PSP
 8001114:	4600      	mov	r0, r0
 8001116:	4770      	bx	lr

08001118 <__set_PSP>:
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
 8001118:	f380 8809 	msr	PSP, r0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
 8001120:	f3ef 8008 	mrs	r0, MSP
 8001124:	4600      	mov	r0, r0
 8001126:	4770      	bx	lr

08001128 <__set_MSP>:
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
 8001128:	f380 8808 	msr	MSP, r0
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8001130:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  return(result);
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8001138:	f380 8811 	msr	BASEPRI, r0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001140:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8001148:	f380 8810 	msr	PRIMASK, r0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8001150:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 8001158:	f380 8813 	msr	FAULTMASK, r0
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001160:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8001168:	f380 8814 	msr	CONTROL, r0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8001170:	ba00      	rev	r0, r0
  return(result);
}
 8001172:	4770      	bx	lr

08001174 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8001174:	ba40      	rev16	r0, r0
  return(result);
}
 8001176:	4770      	bx	lr

08001178 <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8001178:	bac0      	revsh	r0, r0
  return(result);
}
 800117a:	4770      	bx	lr

0800117c <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 8001184:	e8d0 0f4f 	ldrexb	r0, [r0]
   return(result);
}
 8001188:	b2c0      	uxtb	r0, r0
 800118a:	4770      	bx	lr

0800118c <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 800118c:	e8d0 0f5f 	ldrexh	r0, [r0]
   return(result);
}
 8001190:	b280      	uxth	r0, r0
 8001192:	4770      	bx	lr

08001194 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8001194:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 800119c:	e8c1 0f43 	strexb	r3, r0, [r1]
 80011a0:	4618      	mov	r0, r3
   return(result);
}
 80011a2:	4770      	bx	lr

080011a4 <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 80011a4:	e8c1 0f53 	strexh	r3, r0, [r1]
 80011a8:	4618      	mov	r0, r3
   return(result);
}
 80011aa:	4770      	bx	lr

080011ac <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 80011ac:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011b4:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <SystemInit+0xf4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b6:	b430      	push	{r4, r5}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011b8:	6818      	ldr	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011ba:	493c      	ldr	r1, [pc, #240]	; (80012ac <SystemInit+0xf8>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011bc:	f040 0001 	orr.w	r0, r0, #1
 80011c0:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011c2:	685d      	ldr	r5, [r3, #4]
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b082      	sub	sp, #8
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011c6:	4029      	ands	r1, r5
 80011c8:	6059      	str	r1, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ca:	6819      	ldr	r1, [r3, #0]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011cc:	2000      	movs	r0, #0
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ce:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80011d2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80011d6:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011d8:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011da:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011de:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80011e2:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011e4:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011e6:	461a      	mov	r2, r3

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011e8:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80011ec:	6059      	str	r1, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011ee:	609c      	str	r4, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011f0:	9000      	str	r0, [sp, #0]
 80011f2:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80011fa:	6019      	str	r1, [r3, #0]
 80011fc:	e003      	b.n	8001206 <SystemInit+0x52>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001204:	d009      	beq.n	800121a <SystemInit+0x66>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 800120e:	9b00      	ldr	r3, [sp, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f1      	beq.n	80011fe <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SystemInit+0xf4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001222:	bf18      	it	ne
 8001224:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001226:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d006      	beq.n	800123c <SystemInit+0x88>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <SystemInit+0xfc>)
 8001230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001234:	609a      	str	r2, [r3, #8]
#endif 
}
 8001236:	b002      	add	sp, #8
 8001238:	bc30      	pop	{r4, r5}
 800123a:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1; /****************** HCLK 存储器、DMA 不分频 72MHz **********************/
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <SystemInit+0xf4>)
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001240:	6810      	ldr	r0, [r2, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001242:	4619      	mov	r1, r3
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001244:	f040 0010 	orr.w	r0, r0, #16
 8001248:	6010      	str	r0, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800124a:	6810      	ldr	r0, [r2, #0]
 800124c:	f020 0003 	bic.w	r0, r0, #3
 8001250:	6010      	str	r0, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001252:	6810      	ldr	r0, [r2, #0]
 8001254:	f040 0002 	orr.w	r0, r0, #2
 8001258:	6010      	str	r0, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1; /****************** HCLK 存储器、DMA 不分频 72MHz **********************/
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1; /****************** APB2 APB2外设 不分频 72MHz **********************/
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2; /****************** APB1 APB1外设 2分频 36MHz **********************/
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001268:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001270:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6); /****************** 外接12MHz 倍频值为6 72MHz **********************/
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8001278:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001280:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001282:	680b      	ldr	r3, [r1, #0]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <SystemInit+0xf4>)
 8001286:	019b      	lsls	r3, r3, #6
 8001288:	d5fb      	bpl.n	8001282 <SystemInit+0xce>
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800128a:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800128c:	6853      	ldr	r3, [r2, #4]
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001294:	6853      	ldr	r3, [r2, #4]
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800129c:	684b      	ldr	r3, [r1, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d1fa      	bne.n	800129c <SystemInit+0xe8>
 80012a6:	e7c2      	b.n	800122e <SystemInit+0x7a>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	f8ff0000 	.word	0xf8ff0000
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	40022000 	.word	0x40022000

080012b8 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <SystemCoreClockUpdate+0x50>)
 80012ba:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d01b      	beq.n	80012fc <SystemCoreClockUpdate+0x44>
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d009      	beq.n	80012dc <SystemCoreClockUpdate+0x24>
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <SystemCoreClockUpdate+0x54>)
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <SystemCoreClockUpdate+0x50>)
 80012cc:	4910      	ldr	r1, [pc, #64]	; (8001310 <SystemCoreClockUpdate+0x58>)
 80012ce:	6852      	ldr	r2, [r2, #4]
 80012d0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80012d4:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80012d6:	40d3      	lsrs	r3, r2
 80012d8:	610b      	str	r3, [r1, #16]
 80012da:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80012dc:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80012de:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80012e0:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 80012e4:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80012e6:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 80012ea:	d509      	bpl.n	8001300 <SystemCoreClockUpdate+0x48>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80012ec:	6852      	ldr	r2, [r2, #4]
 80012ee:	0392      	lsls	r2, r2, #14
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80012f0:	bf4c      	ite	mi
 80012f2:	4a08      	ldrmi	r2, [pc, #32]	; (8001314 <SystemCoreClockUpdate+0x5c>)
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 80012f4:	4a08      	ldrpl	r2, [pc, #32]	; (8001318 <SystemCoreClockUpdate+0x60>)
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	e7e6      	b.n	80012ca <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemCoreClockUpdate+0x60>)
 80012fe:	e7e4      	b.n	80012ca <SystemCoreClockUpdate+0x12>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <SystemCoreClockUpdate+0x64>)
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	e7e0      	b.n	80012ca <SystemCoreClockUpdate+0x12>
 8001308:	40021000 	.word	0x40021000
 800130c:	007a1200 	.word	0x007a1200
 8001310:	20000014 	.word	0x20000014
 8001314:	005b8d80 	.word	0x005b8d80
 8001318:	00b71b00 	.word	0x00b71b00
 800131c:	003d0900 	.word	0x003d0900

08001320 <NMI_Handler>:
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001324:	e7fe      	b.n	8001324 <HardFault_Handler>
 8001326:	bf00      	nop

08001328 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler>
 800132a:	bf00      	nop

0800132c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800132c:	e7fe      	b.n	800132c <BusFault_Handler>
 800132e:	bf00      	nop

08001330 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler>
 8001332:	bf00      	nop

08001334 <SVC_Handler>:
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <DebugMon_Handler>:
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <SysTick_Handler>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <EXTI0_IRQHandler>:
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <RTC_IRQHandler>:
  * @brief  This function handles RTC global interrupt request.
  * @param  None
  * @retval : None
  */
void RTC_IRQHandler(void)
{
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <main>:
*
*	说明：		
************************************************************
*/
int main(void)
{
 8001348:	b508      	push	{r3, lr}

	Hardware_Init();									//硬件初始化
 800134a:	f7fe ffc3 	bl	80002d4 <Hardware_Init>
 800134e:	4c0f      	ldr	r4, [pc, #60]	; (800138c <main+0x44>)
	
	UsartPrintf(USART1, "\r\n麒麟座开发板-V2.2\r\n");		//打印
 8001350:	490f      	ldr	r1, [pc, #60]	; (8001390 <main+0x48>)
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <main+0x4c>)
 8001354:	f7ff fe98 	bl	8001088 <UsartPrintf>
	UsartPrintf(USART1, "欢迎登陆中移物联官方网站：open.iot.10086.cn\r\n");
 8001358:	490f      	ldr	r1, [pc, #60]	; (8001398 <main+0x50>)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <main+0x4c>)
	
	while(1)
	{
	
		if(usart1Len > 0)
 800135c:	4625      	mov	r5, r4
{

	Hardware_Init();									//硬件初始化
	
	UsartPrintf(USART1, "\r\n麒麟座开发板-V2.2\r\n");		//打印
	UsartPrintf(USART1, "欢迎登陆中移物联官方网站：open.iot.10086.cn\r\n");
 800135e:	f7ff fe93 	bl	8001088 <UsartPrintf>
 8001362:	e002      	b.n	800136a <main+0x22>
			
			memset(usart1Buf, 0, sizeof(usart1Buf));
			usart1Len = 0;
		}
		
		DelayXms(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f7ff fda7 	bl	8000eb8 <DelayXms>
	UsartPrintf(USART1, "欢迎登陆中移物联官方网站：open.iot.10086.cn\r\n");
	
	while(1)
	{
	
		if(usart1Len > 0)
 800136a:	7823      	ldrb	r3, [r4, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f9      	beq.n	8001364 <main+0x1c>
		{
			UsartPrintf(USART1, "Usart1 Get Data: \r\n%s\r\n", usart1Buf);
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <main+0x54>)
 8001372:	490b      	ldr	r1, [pc, #44]	; (80013a0 <main+0x58>)
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <main+0x4c>)
 8001376:	f7ff fe87 	bl	8001088 <UsartPrintf>
			
			memset(usart1Buf, 0, sizeof(usart1Buf));
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	2100      	movs	r1, #0
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <main+0x54>)
 8001380:	f000 f810 	bl	80013a4 <memset>
			usart1Len = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	702b      	strb	r3, [r5, #0]
 8001388:	e7ec      	b.n	8001364 <main+0x1c>
 800138a:	bf00      	nop
 800138c:	20000090 	.word	0x20000090
 8001390:	08001df4 	.word	0x08001df4
 8001394:	40013800 	.word	0x40013800
 8001398:	08001e0c 	.word	0x08001e0c
 800139c:	200000a4 	.word	0x200000a4
 80013a0:	08001e3c 	.word	0x08001e3c

080013a4 <memset>:
 80013a4:	4603      	mov	r3, r0
 80013a6:	4402      	add	r2, r0
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d002      	beq.n	80013b2 <memset+0xe>
 80013ac:	f803 1b01 	strb.w	r1, [r3], #1
 80013b0:	e7fa      	b.n	80013a8 <memset+0x4>
 80013b2:	4770      	bx	lr

080013b4 <_vsiprintf_r>:
 80013b4:	b510      	push	{r4, lr}
 80013b6:	b09a      	sub	sp, #104	; 0x68
 80013b8:	9100      	str	r1, [sp, #0]
 80013ba:	9104      	str	r1, [sp, #16]
 80013bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80013c0:	9102      	str	r1, [sp, #8]
 80013c2:	9105      	str	r1, [sp, #20]
 80013c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013c8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80013cc:	f8ad 100e 	strh.w	r1, [sp, #14]
 80013d0:	4669      	mov	r1, sp
 80013d2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80013d6:	f000 f8e7 	bl	80015a8 <_svfiprintf_r>
 80013da:	9b00      	ldr	r3, [sp, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	b01a      	add	sp, #104	; 0x68
 80013e2:	bd10      	pop	{r4, pc}

080013e4 <vsiprintf>:
 80013e4:	4613      	mov	r3, r2
 80013e6:	460a      	mov	r2, r1
 80013e8:	4601      	mov	r1, r0
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <vsiprintf+0x10>)
 80013ec:	6800      	ldr	r0, [r0, #0]
 80013ee:	f7ff bfe1 	b.w	80013b4 <_vsiprintf_r>
 80013f2:	bf00      	nop
 80013f4:	20000088 	.word	0x20000088

080013f8 <__ssputs_r>:
 80013f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013fc:	688e      	ldr	r6, [r1, #8]
 80013fe:	4682      	mov	sl, r0
 8001400:	429e      	cmp	r6, r3
 8001402:	460c      	mov	r4, r1
 8001404:	4691      	mov	r9, r2
 8001406:	4698      	mov	r8, r3
 8001408:	d83e      	bhi.n	8001488 <__ssputs_r+0x90>
 800140a:	898a      	ldrh	r2, [r1, #12]
 800140c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001410:	d03a      	beq.n	8001488 <__ssputs_r+0x90>
 8001412:	6825      	ldr	r5, [r4, #0]
 8001414:	6909      	ldr	r1, [r1, #16]
 8001416:	2302      	movs	r3, #2
 8001418:	1a6f      	subs	r7, r5, r1
 800141a:	6965      	ldr	r5, [r4, #20]
 800141c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001420:	fb95 f5f3 	sdiv	r5, r5, r3
 8001424:	1c7b      	adds	r3, r7, #1
 8001426:	4443      	add	r3, r8
 8001428:	429d      	cmp	r5, r3
 800142a:	bf38      	it	cc
 800142c:	461d      	movcc	r5, r3
 800142e:	0553      	lsls	r3, r2, #21
 8001430:	d50f      	bpl.n	8001452 <__ssputs_r+0x5a>
 8001432:	4629      	mov	r1, r5
 8001434:	f000 fbc8 	bl	8001bc8 <_malloc_r>
 8001438:	4606      	mov	r6, r0
 800143a:	b198      	cbz	r0, 8001464 <__ssputs_r+0x6c>
 800143c:	463a      	mov	r2, r7
 800143e:	6921      	ldr	r1, [r4, #16]
 8001440:	f000 fb50 	bl	8001ae4 <memcpy>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800144a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	e013      	b.n	800147a <__ssputs_r+0x82>
 8001452:	462a      	mov	r2, r5
 8001454:	f000 fc16 	bl	8001c84 <_realloc_r>
 8001458:	4606      	mov	r6, r0
 800145a:	b970      	cbnz	r0, 800147a <__ssputs_r+0x82>
 800145c:	6921      	ldr	r1, [r4, #16]
 800145e:	4650      	mov	r0, sl
 8001460:	f000 fb66 	bl	8001b30 <_free_r>
 8001464:	230c      	movs	r3, #12
 8001466:	f8ca 3000 	str.w	r3, [sl]
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001474:	81a3      	strh	r3, [r4, #12]
 8001476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800147a:	6126      	str	r6, [r4, #16]
 800147c:	443e      	add	r6, r7
 800147e:	6026      	str	r6, [r4, #0]
 8001480:	4646      	mov	r6, r8
 8001482:	6165      	str	r5, [r4, #20]
 8001484:	1bed      	subs	r5, r5, r7
 8001486:	60a5      	str	r5, [r4, #8]
 8001488:	4546      	cmp	r6, r8
 800148a:	bf28      	it	cs
 800148c:	4646      	movcs	r6, r8
 800148e:	4649      	mov	r1, r9
 8001490:	4632      	mov	r2, r6
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	f000 fb31 	bl	8001afa <memmove>
 8001498:	68a3      	ldr	r3, [r4, #8]
 800149a:	2000      	movs	r0, #0
 800149c:	1b9b      	subs	r3, r3, r6
 800149e:	60a3      	str	r3, [r4, #8]
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	441e      	add	r6, r3
 80014a4:	6026      	str	r6, [r4, #0]
 80014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080014aa <__ssprint_r>:
 80014aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ae:	4693      	mov	fp, r2
 80014b0:	6892      	ldr	r2, [r2, #8]
 80014b2:	4681      	mov	r9, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	b34a      	cbz	r2, 800150c <__ssprint_r+0x62>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8db a000 	ldr.w	sl, [fp]
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	461f      	mov	r7, r3
 80014c2:	e006      	b.n	80014d2 <__ssprint_r+0x28>
 80014c4:	f8da 3000 	ldr.w	r3, [sl]
 80014c8:	f8da 7004 	ldr.w	r7, [sl, #4]
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f10a 0a08 	add.w	sl, sl, #8
 80014d2:	2f00      	cmp	r7, #0
 80014d4:	d0f6      	beq.n	80014c4 <__ssprint_r+0x1a>
 80014d6:	68a6      	ldr	r6, [r4, #8]
 80014d8:	42b7      	cmp	r7, r6
 80014da:	d360      	bcc.n	800159e <__ssprint_r+0xf4>
 80014dc:	89a0      	ldrh	r0, [r4, #12]
 80014de:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80014e2:	d117      	bne.n	8001514 <__ssprint_r+0x6a>
 80014e4:	42b7      	cmp	r7, r6
 80014e6:	d35a      	bcc.n	800159e <__ssprint_r+0xf4>
 80014e8:	4632      	mov	r2, r6
 80014ea:	9901      	ldr	r1, [sp, #4]
 80014ec:	6820      	ldr	r0, [r4, #0]
 80014ee:	f000 fb04 	bl	8001afa <memmove>
 80014f2:	68a2      	ldr	r2, [r4, #8]
 80014f4:	1b92      	subs	r2, r2, r6
 80014f6:	60a2      	str	r2, [r4, #8]
 80014f8:	6822      	ldr	r2, [r4, #0]
 80014fa:	4416      	add	r6, r2
 80014fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001500:	6026      	str	r6, [r4, #0]
 8001502:	1bd7      	subs	r7, r2, r7
 8001504:	f8cb 7008 	str.w	r7, [fp, #8]
 8001508:	2f00      	cmp	r7, #0
 800150a:	d1db      	bne.n	80014c4 <__ssprint_r+0x1a>
 800150c:	2000      	movs	r0, #0
 800150e:	f8cb 0004 	str.w	r0, [fp, #4]
 8001512:	e046      	b.n	80015a2 <__ssprint_r+0xf8>
 8001514:	6825      	ldr	r5, [r4, #0]
 8001516:	6921      	ldr	r1, [r4, #16]
 8001518:	2302      	movs	r3, #2
 800151a:	ebc1 0805 	rsb	r8, r1, r5
 800151e:	6965      	ldr	r5, [r4, #20]
 8001520:	f108 0201 	add.w	r2, r8, #1
 8001524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001528:	fb95 f5f3 	sdiv	r5, r5, r3
 800152c:	443a      	add	r2, r7
 800152e:	4295      	cmp	r5, r2
 8001530:	bf38      	it	cc
 8001532:	4615      	movcc	r5, r2
 8001534:	0543      	lsls	r3, r0, #21
 8001536:	d510      	bpl.n	800155a <__ssprint_r+0xb0>
 8001538:	4629      	mov	r1, r5
 800153a:	4648      	mov	r0, r9
 800153c:	f000 fb44 	bl	8001bc8 <_malloc_r>
 8001540:	4606      	mov	r6, r0
 8001542:	b1a0      	cbz	r0, 800156e <__ssprint_r+0xc4>
 8001544:	4642      	mov	r2, r8
 8001546:	6921      	ldr	r1, [r4, #16]
 8001548:	f000 facc 	bl	8001ae4 <memcpy>
 800154c:	89a2      	ldrh	r2, [r4, #12]
 800154e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001556:	81a2      	strh	r2, [r4, #12]
 8001558:	e018      	b.n	800158c <__ssprint_r+0xe2>
 800155a:	462a      	mov	r2, r5
 800155c:	4648      	mov	r0, r9
 800155e:	f000 fb91 	bl	8001c84 <_realloc_r>
 8001562:	4606      	mov	r6, r0
 8001564:	b990      	cbnz	r0, 800158c <__ssprint_r+0xe2>
 8001566:	6921      	ldr	r1, [r4, #16]
 8001568:	4648      	mov	r0, r9
 800156a:	f000 fae1 	bl	8001b30 <_free_r>
 800156e:	220c      	movs	r2, #12
 8001570:	f8c9 2000 	str.w	r2, [r9]
 8001574:	89a2      	ldrh	r2, [r4, #12]
 8001576:	f04f 30ff 	mov.w	r0, #4294967295
 800157a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800157e:	81a2      	strh	r2, [r4, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f8cb 2008 	str.w	r2, [fp, #8]
 8001586:	f8cb 2004 	str.w	r2, [fp, #4]
 800158a:	e00a      	b.n	80015a2 <__ssprint_r+0xf8>
 800158c:	6126      	str	r6, [r4, #16]
 800158e:	6165      	str	r5, [r4, #20]
 8001590:	4446      	add	r6, r8
 8001592:	ebc8 0505 	rsb	r5, r8, r5
 8001596:	6026      	str	r6, [r4, #0]
 8001598:	60a5      	str	r5, [r4, #8]
 800159a:	463e      	mov	r6, r7
 800159c:	e7a2      	b.n	80014e4 <__ssprint_r+0x3a>
 800159e:	463e      	mov	r6, r7
 80015a0:	e7a2      	b.n	80014e8 <__ssprint_r+0x3e>
 80015a2:	b003      	add	sp, #12
 80015a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015a8 <_svfiprintf_r>:
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ac:	b09d      	sub	sp, #116	; 0x74
 80015ae:	9303      	str	r3, [sp, #12]
 80015b0:	898b      	ldrh	r3, [r1, #12]
 80015b2:	4680      	mov	r8, r0
 80015b4:	061c      	lsls	r4, r3, #24
 80015b6:	460d      	mov	r5, r1
 80015b8:	4616      	mov	r6, r2
 80015ba:	d50d      	bpl.n	80015d8 <_svfiprintf_r+0x30>
 80015bc:	690b      	ldr	r3, [r1, #16]
 80015be:	b95b      	cbnz	r3, 80015d8 <_svfiprintf_r+0x30>
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	f000 fb01 	bl	8001bc8 <_malloc_r>
 80015c6:	6028      	str	r0, [r5, #0]
 80015c8:	6128      	str	r0, [r5, #16]
 80015ca:	b918      	cbnz	r0, 80015d4 <_svfiprintf_r+0x2c>
 80015cc:	230c      	movs	r3, #12
 80015ce:	f8c8 3000 	str.w	r3, [r8]
 80015d2:	e0cd      	b.n	8001770 <_svfiprintf_r+0x1c8>
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	616b      	str	r3, [r5, #20]
 80015d8:	2300      	movs	r3, #0
 80015da:	9309      	str	r3, [sp, #36]	; 0x24
 80015dc:	2320      	movs	r3, #32
 80015de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015e2:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8001780 <_svfiprintf_r+0x1d8>
 80015e6:	2330      	movs	r3, #48	; 0x30
 80015e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015ec:	4637      	mov	r7, r6
 80015ee:	463c      	mov	r4, r7
 80015f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80015f4:	b91b      	cbnz	r3, 80015fe <_svfiprintf_r+0x56>
 80015f6:	ebb7 0906 	subs.w	r9, r7, r6
 80015fa:	d010      	beq.n	800161e <_svfiprintf_r+0x76>
 80015fc:	e003      	b.n	8001606 <_svfiprintf_r+0x5e>
 80015fe:	2b25      	cmp	r3, #37	; 0x25
 8001600:	d0f9      	beq.n	80015f6 <_svfiprintf_r+0x4e>
 8001602:	4627      	mov	r7, r4
 8001604:	e7f3      	b.n	80015ee <_svfiprintf_r+0x46>
 8001606:	464b      	mov	r3, r9
 8001608:	4632      	mov	r2, r6
 800160a:	4629      	mov	r1, r5
 800160c:	4640      	mov	r0, r8
 800160e:	f7ff fef3 	bl	80013f8 <__ssputs_r>
 8001612:	3001      	adds	r0, #1
 8001614:	f000 80a7 	beq.w	8001766 <_svfiprintf_r+0x1be>
 8001618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161a:	444b      	add	r3, r9
 800161c:	9309      	str	r3, [sp, #36]	; 0x24
 800161e:	783b      	ldrb	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a0 	beq.w	8001766 <_svfiprintf_r+0x1be>
 8001626:	2300      	movs	r3, #0
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	9307      	str	r3, [sp, #28]
 8001630:	9205      	str	r2, [sp, #20]
 8001632:	9306      	str	r3, [sp, #24]
 8001634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001638:	931a      	str	r3, [sp, #104]	; 0x68
 800163a:	2601      	movs	r6, #1
 800163c:	2205      	movs	r2, #5
 800163e:	7821      	ldrb	r1, [r4, #0]
 8001640:	484e      	ldr	r0, [pc, #312]	; (800177c <_svfiprintf_r+0x1d4>)
 8001642:	f000 fa41 	bl	8001ac8 <memchr>
 8001646:	1c67      	adds	r7, r4, #1
 8001648:	9b04      	ldr	r3, [sp, #16]
 800164a:	b138      	cbz	r0, 800165c <_svfiprintf_r+0xb4>
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <_svfiprintf_r+0x1d4>)
 800164e:	463c      	mov	r4, r7
 8001650:	1a80      	subs	r0, r0, r2
 8001652:	fa06 f000 	lsl.w	r0, r6, r0
 8001656:	4318      	orrs	r0, r3
 8001658:	9004      	str	r0, [sp, #16]
 800165a:	e7ef      	b.n	800163c <_svfiprintf_r+0x94>
 800165c:	06d9      	lsls	r1, r3, #27
 800165e:	bf44      	itt	mi
 8001660:	2220      	movmi	r2, #32
 8001662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001666:	071a      	lsls	r2, r3, #28
 8001668:	bf44      	itt	mi
 800166a:	222b      	movmi	r2, #43	; 0x2b
 800166c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001670:	7822      	ldrb	r2, [r4, #0]
 8001672:	2a2a      	cmp	r2, #42	; 0x2a
 8001674:	d003      	beq.n	800167e <_svfiprintf_r+0xd6>
 8001676:	9a07      	ldr	r2, [sp, #28]
 8001678:	2100      	movs	r1, #0
 800167a:	200a      	movs	r0, #10
 800167c:	e00b      	b.n	8001696 <_svfiprintf_r+0xee>
 800167e:	9a03      	ldr	r2, [sp, #12]
 8001680:	1d11      	adds	r1, r2, #4
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	9103      	str	r1, [sp, #12]
 8001686:	2a00      	cmp	r2, #0
 8001688:	da10      	bge.n	80016ac <_svfiprintf_r+0x104>
 800168a:	4252      	negs	r2, r2
 800168c:	f043 0002 	orr.w	r0, r3, #2
 8001690:	9207      	str	r2, [sp, #28]
 8001692:	9004      	str	r0, [sp, #16]
 8001694:	e00b      	b.n	80016ae <_svfiprintf_r+0x106>
 8001696:	4627      	mov	r7, r4
 8001698:	783b      	ldrb	r3, [r7, #0]
 800169a:	3401      	adds	r4, #1
 800169c:	3b30      	subs	r3, #48	; 0x30
 800169e:	2b09      	cmp	r3, #9
 80016a0:	d803      	bhi.n	80016aa <_svfiprintf_r+0x102>
 80016a2:	fb00 3202 	mla	r2, r0, r2, r3
 80016a6:	2101      	movs	r1, #1
 80016a8:	e7f5      	b.n	8001696 <_svfiprintf_r+0xee>
 80016aa:	b101      	cbz	r1, 80016ae <_svfiprintf_r+0x106>
 80016ac:	9207      	str	r2, [sp, #28]
 80016ae:	783b      	ldrb	r3, [r7, #0]
 80016b0:	2b2e      	cmp	r3, #46	; 0x2e
 80016b2:	d11e      	bne.n	80016f2 <_svfiprintf_r+0x14a>
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b2a      	cmp	r3, #42	; 0x2a
 80016b8:	d10a      	bne.n	80016d0 <_svfiprintf_r+0x128>
 80016ba:	9b03      	ldr	r3, [sp, #12]
 80016bc:	3702      	adds	r7, #2
 80016be:	1d1a      	adds	r2, r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	9203      	str	r2, [sp, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfb8      	it	lt
 80016c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80016cc:	9305      	str	r3, [sp, #20]
 80016ce:	e010      	b.n	80016f2 <_svfiprintf_r+0x14a>
 80016d0:	2300      	movs	r3, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	9305      	str	r3, [sp, #20]
 80016d6:	1c78      	adds	r0, r7, #1
 80016d8:	240a      	movs	r4, #10
 80016da:	4607      	mov	r7, r0
 80016dc:	783a      	ldrb	r2, [r7, #0]
 80016de:	3001      	adds	r0, #1
 80016e0:	3a30      	subs	r2, #48	; 0x30
 80016e2:	2a09      	cmp	r2, #9
 80016e4:	d803      	bhi.n	80016ee <_svfiprintf_r+0x146>
 80016e6:	fb04 2101 	mla	r1, r4, r1, r2
 80016ea:	2301      	movs	r3, #1
 80016ec:	e7f5      	b.n	80016da <_svfiprintf_r+0x132>
 80016ee:	b103      	cbz	r3, 80016f2 <_svfiprintf_r+0x14a>
 80016f0:	9105      	str	r1, [sp, #20]
 80016f2:	2203      	movs	r2, #3
 80016f4:	7839      	ldrb	r1, [r7, #0]
 80016f6:	4822      	ldr	r0, [pc, #136]	; (8001780 <_svfiprintf_r+0x1d8>)
 80016f8:	f000 f9e6 	bl	8001ac8 <memchr>
 80016fc:	b140      	cbz	r0, 8001710 <_svfiprintf_r+0x168>
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	ebcb 0000 	rsb	r0, fp, r0
 8001704:	fa03 f000 	lsl.w	r0, r3, r0
 8001708:	9b04      	ldr	r3, [sp, #16]
 800170a:	3701      	adds	r7, #1
 800170c:	4318      	orrs	r0, r3
 800170e:	9004      	str	r0, [sp, #16]
 8001710:	7839      	ldrb	r1, [r7, #0]
 8001712:	2206      	movs	r2, #6
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <_svfiprintf_r+0x1dc>)
 8001716:	1c7e      	adds	r6, r7, #1
 8001718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800171c:	f000 f9d4 	bl	8001ac8 <memchr>
 8001720:	b188      	cbz	r0, 8001746 <_svfiprintf_r+0x19e>
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <_svfiprintf_r+0x1e0>)
 8001724:	b933      	cbnz	r3, 8001734 <_svfiprintf_r+0x18c>
 8001726:	9b03      	ldr	r3, [sp, #12]
 8001728:	3307      	adds	r3, #7
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	3308      	adds	r3, #8
 8001730:	9303      	str	r3, [sp, #12]
 8001732:	e014      	b.n	800175e <_svfiprintf_r+0x1b6>
 8001734:	ab03      	add	r3, sp, #12
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	462a      	mov	r2, r5
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <_svfiprintf_r+0x1e4>)
 800173c:	a904      	add	r1, sp, #16
 800173e:	4640      	mov	r0, r8
 8001740:	f3af 8000 	nop.w
 8001744:	e007      	b.n	8001756 <_svfiprintf_r+0x1ae>
 8001746:	ab03      	add	r3, sp, #12
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	462a      	mov	r2, r5
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <_svfiprintf_r+0x1e4>)
 800174e:	a904      	add	r1, sp, #16
 8001750:	4640      	mov	r0, r8
 8001752:	f000 f893 	bl	800187c <_printf_i>
 8001756:	f1b0 3fff 	cmp.w	r0, #4294967295
 800175a:	4682      	mov	sl, r0
 800175c:	d003      	beq.n	8001766 <_svfiprintf_r+0x1be>
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4453      	add	r3, sl
 8001762:	9309      	str	r3, [sp, #36]	; 0x24
 8001764:	e742      	b.n	80015ec <_svfiprintf_r+0x44>
 8001766:	89ab      	ldrh	r3, [r5, #12]
 8001768:	065b      	lsls	r3, r3, #25
 800176a:	d401      	bmi.n	8001770 <_svfiprintf_r+0x1c8>
 800176c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800176e:	e001      	b.n	8001774 <_svfiprintf_r+0x1cc>
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	b01d      	add	sp, #116	; 0x74
 8001776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	08001e58 	.word	0x08001e58
 8001780:	08001e5e 	.word	0x08001e5e
 8001784:	08001e62 	.word	0x08001e62
 8001788:	00000000 	.word	0x00000000
 800178c:	080013f9 	.word	0x080013f9

08001790 <_printf_common>:
 8001790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001794:	4691      	mov	r9, r2
 8001796:	461f      	mov	r7, r3
 8001798:	690a      	ldr	r2, [r1, #16]
 800179a:	688b      	ldr	r3, [r1, #8]
 800179c:	4606      	mov	r6, r0
 800179e:	4293      	cmp	r3, r2
 80017a0:	bfb8      	it	lt
 80017a2:	4613      	movlt	r3, r2
 80017a4:	f8c9 3000 	str.w	r3, [r9]
 80017a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017ac:	460c      	mov	r4, r1
 80017ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017b2:	b112      	cbz	r2, 80017ba <_printf_common+0x2a>
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8c9 3000 	str.w	r3, [r9]
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	0699      	lsls	r1, r3, #26
 80017be:	bf42      	ittt	mi
 80017c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80017c4:	3302      	addmi	r3, #2
 80017c6:	f8c9 3000 	strmi.w	r3, [r9]
 80017ca:	6825      	ldr	r5, [r4, #0]
 80017cc:	f015 0506 	ands.w	r5, r5, #6
 80017d0:	d110      	bne.n	80017f4 <_printf_common+0x64>
 80017d2:	f104 0a19 	add.w	sl, r4, #25
 80017d6:	e007      	b.n	80017e8 <_printf_common+0x58>
 80017d8:	2301      	movs	r3, #1
 80017da:	4652      	mov	r2, sl
 80017dc:	4639      	mov	r1, r7
 80017de:	4630      	mov	r0, r6
 80017e0:	47c0      	blx	r8
 80017e2:	3001      	adds	r0, #1
 80017e4:	d01a      	beq.n	800181c <_printf_common+0x8c>
 80017e6:	3501      	adds	r5, #1
 80017e8:	68e3      	ldr	r3, [r4, #12]
 80017ea:	f8d9 2000 	ldr.w	r2, [r9]
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	429d      	cmp	r5, r3
 80017f2:	dbf1      	blt.n	80017d8 <_printf_common+0x48>
 80017f4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	3300      	adds	r3, #0
 80017fc:	bf18      	it	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	0692      	lsls	r2, r2, #26
 8001802:	d50f      	bpl.n	8001824 <_printf_common+0x94>
 8001804:	18e1      	adds	r1, r4, r3
 8001806:	2030      	movs	r0, #48	; 0x30
 8001808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001812:	4422      	add	r2, r4
 8001814:	3302      	adds	r3, #2
 8001816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800181a:	e003      	b.n	8001824 <_printf_common+0x94>
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001828:	4639      	mov	r1, r7
 800182a:	4630      	mov	r0, r6
 800182c:	47c0      	blx	r8
 800182e:	3001      	adds	r0, #1
 8001830:	d0f4      	beq.n	800181c <_printf_common+0x8c>
 8001832:	6822      	ldr	r2, [r4, #0]
 8001834:	f8d9 5000 	ldr.w	r5, [r9]
 8001838:	68e3      	ldr	r3, [r4, #12]
 800183a:	f002 0206 	and.w	r2, r2, #6
 800183e:	2a04      	cmp	r2, #4
 8001840:	bf08      	it	eq
 8001842:	1b5d      	subeq	r5, r3, r5
 8001844:	6922      	ldr	r2, [r4, #16]
 8001846:	68a3      	ldr	r3, [r4, #8]
 8001848:	bf0c      	ite	eq
 800184a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800184e:	2500      	movne	r5, #0
 8001850:	4293      	cmp	r3, r2
 8001852:	bfc4      	itt	gt
 8001854:	1a9b      	subgt	r3, r3, r2
 8001856:	18ed      	addgt	r5, r5, r3
 8001858:	f04f 0900 	mov.w	r9, #0
 800185c:	341a      	adds	r4, #26
 800185e:	454d      	cmp	r5, r9
 8001860:	d009      	beq.n	8001876 <_printf_common+0xe6>
 8001862:	2301      	movs	r3, #1
 8001864:	4622      	mov	r2, r4
 8001866:	4639      	mov	r1, r7
 8001868:	4630      	mov	r0, r6
 800186a:	47c0      	blx	r8
 800186c:	3001      	adds	r0, #1
 800186e:	d0d5      	beq.n	800181c <_printf_common+0x8c>
 8001870:	f109 0901 	add.w	r9, r9, #1
 8001874:	e7f3      	b.n	800185e <_printf_common+0xce>
 8001876:	2000      	movs	r0, #0
 8001878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800187c <_printf_i>:
 800187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001880:	4617      	mov	r7, r2
 8001882:	7e0a      	ldrb	r2, [r1, #24]
 8001884:	b085      	sub	sp, #20
 8001886:	2a6e      	cmp	r2, #110	; 0x6e
 8001888:	4698      	mov	r8, r3
 800188a:	4606      	mov	r6, r0
 800188c:	460c      	mov	r4, r1
 800188e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001890:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001894:	f000 80ae 	beq.w	80019f4 <_printf_i+0x178>
 8001898:	d811      	bhi.n	80018be <_printf_i+0x42>
 800189a:	2a63      	cmp	r2, #99	; 0x63
 800189c:	d022      	beq.n	80018e4 <_printf_i+0x68>
 800189e:	d809      	bhi.n	80018b4 <_printf_i+0x38>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	f000 80bb 	beq.w	8001a1c <_printf_i+0x1a0>
 80018a6:	2a58      	cmp	r2, #88	; 0x58
 80018a8:	f040 80ca 	bne.w	8001a40 <_printf_i+0x1c4>
 80018ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80018b0:	4983      	ldr	r1, [pc, #524]	; (8001ac0 <_printf_i+0x244>)
 80018b2:	e055      	b.n	8001960 <_printf_i+0xe4>
 80018b4:	2a64      	cmp	r2, #100	; 0x64
 80018b6:	d01e      	beq.n	80018f6 <_printf_i+0x7a>
 80018b8:	2a69      	cmp	r2, #105	; 0x69
 80018ba:	d01c      	beq.n	80018f6 <_printf_i+0x7a>
 80018bc:	e0c0      	b.n	8001a40 <_printf_i+0x1c4>
 80018be:	2a73      	cmp	r2, #115	; 0x73
 80018c0:	f000 80b0 	beq.w	8001a24 <_printf_i+0x1a8>
 80018c4:	d809      	bhi.n	80018da <_printf_i+0x5e>
 80018c6:	2a6f      	cmp	r2, #111	; 0x6f
 80018c8:	d02e      	beq.n	8001928 <_printf_i+0xac>
 80018ca:	2a70      	cmp	r2, #112	; 0x70
 80018cc:	f040 80b8 	bne.w	8001a40 <_printf_i+0x1c4>
 80018d0:	680a      	ldr	r2, [r1, #0]
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	600a      	str	r2, [r1, #0]
 80018d8:	e03e      	b.n	8001958 <_printf_i+0xdc>
 80018da:	2a75      	cmp	r2, #117	; 0x75
 80018dc:	d024      	beq.n	8001928 <_printf_i+0xac>
 80018de:	2a78      	cmp	r2, #120	; 0x78
 80018e0:	d03a      	beq.n	8001958 <_printf_i+0xdc>
 80018e2:	e0ad      	b.n	8001a40 <_printf_i+0x1c4>
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80018ea:	1d11      	adds	r1, r2, #4
 80018ec:	6019      	str	r1, [r3, #0]
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018f4:	e0a8      	b.n	8001a48 <_printf_i+0x1cc>
 80018f6:	6821      	ldr	r1, [r4, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018fe:	d002      	beq.n	8001906 <_printf_i+0x8a>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	6019      	str	r1, [r3, #0]
 8001904:	e008      	b.n	8001918 <_printf_i+0x9c>
 8001906:	f011 0f40 	tst.w	r1, #64	; 0x40
 800190a:	f102 0104 	add.w	r1, r2, #4
 800190e:	6019      	str	r1, [r3, #0]
 8001910:	d002      	beq.n	8001918 <_printf_i+0x9c>
 8001912:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001916:	e000      	b.n	800191a <_printf_i+0x9e>
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da3c      	bge.n	8001998 <_printf_i+0x11c>
 800191e:	222d      	movs	r2, #45	; 0x2d
 8001920:	425b      	negs	r3, r3
 8001922:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001926:	e037      	b.n	8001998 <_printf_i+0x11c>
 8001928:	6821      	ldr	r1, [r4, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001930:	d002      	beq.n	8001938 <_printf_i+0xbc>
 8001932:	1d11      	adds	r1, r2, #4
 8001934:	6019      	str	r1, [r3, #0]
 8001936:	e007      	b.n	8001948 <_printf_i+0xcc>
 8001938:	f011 0f40 	tst.w	r1, #64	; 0x40
 800193c:	f102 0104 	add.w	r1, r2, #4
 8001940:	6019      	str	r1, [r3, #0]
 8001942:	d001      	beq.n	8001948 <_printf_i+0xcc>
 8001944:	8813      	ldrh	r3, [r2, #0]
 8001946:	e000      	b.n	800194a <_printf_i+0xce>
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	7e22      	ldrb	r2, [r4, #24]
 800194c:	495c      	ldr	r1, [pc, #368]	; (8001ac0 <_printf_i+0x244>)
 800194e:	2a6f      	cmp	r2, #111	; 0x6f
 8001950:	bf14      	ite	ne
 8001952:	220a      	movne	r2, #10
 8001954:	2208      	moveq	r2, #8
 8001956:	e01b      	b.n	8001990 <_printf_i+0x114>
 8001958:	2278      	movs	r2, #120	; 0x78
 800195a:	495a      	ldr	r1, [pc, #360]	; (8001ac4 <_printf_i+0x248>)
 800195c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001968:	f100 0504 	add.w	r5, r0, #4
 800196c:	601d      	str	r5, [r3, #0]
 800196e:	d103      	bne.n	8001978 <_printf_i+0xfc>
 8001970:	0655      	lsls	r5, r2, #25
 8001972:	d501      	bpl.n	8001978 <_printf_i+0xfc>
 8001974:	8803      	ldrh	r3, [r0, #0]
 8001976:	e000      	b.n	800197a <_printf_i+0xfe>
 8001978:	6803      	ldr	r3, [r0, #0]
 800197a:	07d0      	lsls	r0, r2, #31
 800197c:	bf44      	itt	mi
 800197e:	f042 0220 	orrmi.w	r2, r2, #32
 8001982:	6022      	strmi	r2, [r4, #0]
 8001984:	b91b      	cbnz	r3, 800198e <_printf_i+0x112>
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	f022 0220 	bic.w	r2, r2, #32
 800198c:	6022      	str	r2, [r4, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	2000      	movs	r0, #0
 8001992:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001996:	e001      	b.n	800199c <_printf_i+0x120>
 8001998:	4949      	ldr	r1, [pc, #292]	; (8001ac0 <_printf_i+0x244>)
 800199a:	220a      	movs	r2, #10
 800199c:	6865      	ldr	r5, [r4, #4]
 800199e:	2d00      	cmp	r5, #0
 80019a0:	60a5      	str	r5, [r4, #8]
 80019a2:	db08      	blt.n	80019b6 <_printf_i+0x13a>
 80019a4:	6820      	ldr	r0, [r4, #0]
 80019a6:	f020 0004 	bic.w	r0, r0, #4
 80019aa:	6020      	str	r0, [r4, #0]
 80019ac:	b92b      	cbnz	r3, 80019ba <_printf_i+0x13e>
 80019ae:	2d00      	cmp	r5, #0
 80019b0:	d17d      	bne.n	8001aae <_printf_i+0x232>
 80019b2:	4675      	mov	r5, lr
 80019b4:	e00c      	b.n	80019d0 <_printf_i+0x154>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d079      	beq.n	8001aae <_printf_i+0x232>
 80019ba:	4675      	mov	r5, lr
 80019bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80019c0:	fb02 3310 	mls	r3, r2, r0, r3
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80019ca:	4603      	mov	r3, r0
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1f5      	bne.n	80019bc <_printf_i+0x140>
 80019d0:	2a08      	cmp	r2, #8
 80019d2:	d10b      	bne.n	80019ec <_printf_i+0x170>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	07da      	lsls	r2, r3, #31
 80019d8:	d508      	bpl.n	80019ec <_printf_i+0x170>
 80019da:	6923      	ldr	r3, [r4, #16]
 80019dc:	6862      	ldr	r2, [r4, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	bfde      	ittt	le
 80019e2:	2330      	movle	r3, #48	; 0x30
 80019e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80019ec:	ebc5 030e 	rsb	r3, r5, lr
 80019f0:	6123      	str	r3, [r4, #16]
 80019f2:	e02e      	b.n	8001a52 <_printf_i+0x1d6>
 80019f4:	6808      	ldr	r0, [r1, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80019fc:	6949      	ldr	r1, [r1, #20]
 80019fe:	d003      	beq.n	8001a08 <_printf_i+0x18c>
 8001a00:	1d10      	adds	r0, r2, #4
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	e008      	b.n	8001a1a <_printf_i+0x19e>
 8001a08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a0c:	f102 0004 	add.w	r0, r2, #4
 8001a10:	6018      	str	r0, [r3, #0]
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	d001      	beq.n	8001a1a <_printf_i+0x19e>
 8001a16:	8019      	strh	r1, [r3, #0]
 8001a18:	e000      	b.n	8001a1c <_printf_i+0x1a0>
 8001a1a:	6019      	str	r1, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6123      	str	r3, [r4, #16]
 8001a20:	4675      	mov	r5, lr
 8001a22:	e016      	b.n	8001a52 <_printf_i+0x1d6>
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	1d11      	adds	r1, r2, #4
 8001a28:	6019      	str	r1, [r3, #0]
 8001a2a:	6815      	ldr	r5, [r2, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6862      	ldr	r2, [r4, #4]
 8001a30:	4628      	mov	r0, r5
 8001a32:	f000 f849 	bl	8001ac8 <memchr>
 8001a36:	b108      	cbz	r0, 8001a3c <_printf_i+0x1c0>
 8001a38:	1b40      	subs	r0, r0, r5
 8001a3a:	6060      	str	r0, [r4, #4]
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	e004      	b.n	8001a4a <_printf_i+0x1ce>
 8001a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001a48:	2301      	movs	r3, #1
 8001a4a:	6123      	str	r3, [r4, #16]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a52:	f8cd 8000 	str.w	r8, [sp]
 8001a56:	463b      	mov	r3, r7
 8001a58:	aa03      	add	r2, sp, #12
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f7ff fe97 	bl	8001790 <_printf_common>
 8001a62:	3001      	adds	r0, #1
 8001a64:	d102      	bne.n	8001a6c <_printf_i+0x1f0>
 8001a66:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6a:	e026      	b.n	8001aba <_printf_i+0x23e>
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	462a      	mov	r2, r5
 8001a70:	4639      	mov	r1, r7
 8001a72:	4630      	mov	r0, r6
 8001a74:	47c0      	blx	r8
 8001a76:	3001      	adds	r0, #1
 8001a78:	d0f5      	beq.n	8001a66 <_printf_i+0x1ea>
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	079b      	lsls	r3, r3, #30
 8001a7e:	d510      	bpl.n	8001aa2 <_printf_i+0x226>
 8001a80:	2500      	movs	r5, #0
 8001a82:	f104 0919 	add.w	r9, r4, #25
 8001a86:	e007      	b.n	8001a98 <_printf_i+0x21c>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	464a      	mov	r2, r9
 8001a8c:	4639      	mov	r1, r7
 8001a8e:	4630      	mov	r0, r6
 8001a90:	47c0      	blx	r8
 8001a92:	3001      	adds	r0, #1
 8001a94:	d0e7      	beq.n	8001a66 <_printf_i+0x1ea>
 8001a96:	3501      	adds	r5, #1
 8001a98:	68e3      	ldr	r3, [r4, #12]
 8001a9a:	9a03      	ldr	r2, [sp, #12]
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	429d      	cmp	r5, r3
 8001aa0:	dbf2      	blt.n	8001a88 <_printf_i+0x20c>
 8001aa2:	68e0      	ldr	r0, [r4, #12]
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	4298      	cmp	r0, r3
 8001aa8:	bfb8      	it	lt
 8001aaa:	4618      	movlt	r0, r3
 8001aac:	e005      	b.n	8001aba <_printf_i+0x23e>
 8001aae:	780b      	ldrb	r3, [r1, #0]
 8001ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ab8:	e78a      	b.n	80019d0 <_printf_i+0x154>
 8001aba:	b005      	add	sp, #20
 8001abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac0:	08001e69 	.word	0x08001e69
 8001ac4:	08001e7a 	.word	0x08001e7a

08001ac8 <memchr>:
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	b2c9      	uxtb	r1, r1
 8001acc:	4402      	add	r2, r0
 8001ace:	4290      	cmp	r0, r2
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	d005      	beq.n	8001ae0 <memchr+0x18>
 8001ad4:	781c      	ldrb	r4, [r3, #0]
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	428c      	cmp	r4, r1
 8001ada:	d1f8      	bne.n	8001ace <memchr+0x6>
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd10      	pop	{r4, pc}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	bd10      	pop	{r4, pc}

08001ae4 <memcpy>:
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	1e43      	subs	r3, r0, #1
 8001ae8:	440a      	add	r2, r1
 8001aea:	4291      	cmp	r1, r2
 8001aec:	d004      	beq.n	8001af8 <memcpy+0x14>
 8001aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001af6:	e7f8      	b.n	8001aea <memcpy+0x6>
 8001af8:	bd10      	pop	{r4, pc}

08001afa <memmove>:
 8001afa:	4288      	cmp	r0, r1
 8001afc:	b510      	push	{r4, lr}
 8001afe:	eb01 0302 	add.w	r3, r1, r2
 8001b02:	d801      	bhi.n	8001b08 <memmove+0xe>
 8001b04:	1e42      	subs	r2, r0, #1
 8001b06:	e00b      	b.n	8001b20 <memmove+0x26>
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d2fb      	bcs.n	8001b04 <memmove+0xa>
 8001b0c:	1881      	adds	r1, r0, r2
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	42d3      	cmn	r3, r2
 8001b12:	d004      	beq.n	8001b1e <memmove+0x24>
 8001b14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001b1c:	e7f8      	b.n	8001b10 <memmove+0x16>
 8001b1e:	bd10      	pop	{r4, pc}
 8001b20:	4299      	cmp	r1, r3
 8001b22:	d004      	beq.n	8001b2e <memmove+0x34>
 8001b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b28:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001b2c:	e7f8      	b.n	8001b20 <memmove+0x26>
 8001b2e:	bd10      	pop	{r4, pc}

08001b30 <_free_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4605      	mov	r5, r0
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d044      	beq.n	8001bc2 <_free_r+0x92>
 8001b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b3c:	1f0c      	subs	r4, r1, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bfb8      	it	lt
 8001b42:	18e4      	addlt	r4, r4, r3
 8001b44:	f000 f8d4 	bl	8001cf0 <__malloc_lock>
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <_free_r+0x94>)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	b913      	cbnz	r3, 8001b56 <_free_r+0x26>
 8001b50:	6063      	str	r3, [r4, #4]
 8001b52:	6014      	str	r4, [r2, #0]
 8001b54:	e030      	b.n	8001bb8 <_free_r+0x88>
 8001b56:	42a3      	cmp	r3, r4
 8001b58:	d90d      	bls.n	8001b76 <_free_r+0x46>
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	18a0      	adds	r0, r4, r2
 8001b5e:	4283      	cmp	r3, r0
 8001b60:	bf01      	itttt	eq
 8001b62:	6818      	ldreq	r0, [r3, #0]
 8001b64:	685b      	ldreq	r3, [r3, #4]
 8001b66:	1812      	addeq	r2, r2, r0
 8001b68:	6022      	streq	r2, [r4, #0]
 8001b6a:	6063      	str	r3, [r4, #4]
 8001b6c:	600c      	str	r4, [r1, #0]
 8001b6e:	e023      	b.n	8001bb8 <_free_r+0x88>
 8001b70:	42a2      	cmp	r2, r4
 8001b72:	d803      	bhi.n	8001b7c <_free_r+0x4c>
 8001b74:	4613      	mov	r3, r2
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d1f9      	bne.n	8001b70 <_free_r+0x40>
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	1819      	adds	r1, r3, r0
 8001b80:	42a1      	cmp	r1, r4
 8001b82:	d10b      	bne.n	8001b9c <_free_r+0x6c>
 8001b84:	6821      	ldr	r1, [r4, #0]
 8001b86:	4401      	add	r1, r0
 8001b88:	1858      	adds	r0, r3, r1
 8001b8a:	4282      	cmp	r2, r0
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	d113      	bne.n	8001bb8 <_free_r+0x88>
 8001b90:	6810      	ldr	r0, [r2, #0]
 8001b92:	6852      	ldr	r2, [r2, #4]
 8001b94:	4401      	add	r1, r0
 8001b96:	6019      	str	r1, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e00d      	b.n	8001bb8 <_free_r+0x88>
 8001b9c:	d902      	bls.n	8001ba4 <_free_r+0x74>
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	e009      	b.n	8001bb8 <_free_r+0x88>
 8001ba4:	6821      	ldr	r1, [r4, #0]
 8001ba6:	1860      	adds	r0, r4, r1
 8001ba8:	4282      	cmp	r2, r0
 8001baa:	bf01      	itttt	eq
 8001bac:	6810      	ldreq	r0, [r2, #0]
 8001bae:	6852      	ldreq	r2, [r2, #4]
 8001bb0:	1809      	addeq	r1, r1, r0
 8001bb2:	6021      	streq	r1, [r4, #0]
 8001bb4:	6062      	str	r2, [r4, #4]
 8001bb6:	605c      	str	r4, [r3, #4]
 8001bb8:	4628      	mov	r0, r5
 8001bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bbe:	f000 b898 	b.w	8001cf2 <__malloc_unlock>
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	2000009c 	.word	0x2000009c

08001bc8 <_malloc_r>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	1ccd      	adds	r5, r1, #3
 8001bcc:	f025 0503 	bic.w	r5, r5, #3
 8001bd0:	3508      	adds	r5, #8
 8001bd2:	2d0c      	cmp	r5, #12
 8001bd4:	bf38      	it	cc
 8001bd6:	250c      	movcc	r5, #12
 8001bd8:	2d00      	cmp	r5, #0
 8001bda:	4606      	mov	r6, r0
 8001bdc:	db01      	blt.n	8001be2 <_malloc_r+0x1a>
 8001bde:	42a9      	cmp	r1, r5
 8001be0:	d902      	bls.n	8001be8 <_malloc_r+0x20>
 8001be2:	230c      	movs	r3, #12
 8001be4:	6033      	str	r3, [r6, #0]
 8001be6:	e046      	b.n	8001c76 <_malloc_r+0xae>
 8001be8:	f000 f882 	bl	8001cf0 <__malloc_lock>
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <_malloc_r+0xb4>)
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	b1a1      	cbz	r1, 8001c20 <_malloc_r+0x58>
 8001bf6:	680b      	ldr	r3, [r1, #0]
 8001bf8:	1b5b      	subs	r3, r3, r5
 8001bfa:	d40e      	bmi.n	8001c1a <_malloc_r+0x52>
 8001bfc:	2b0b      	cmp	r3, #11
 8001bfe:	d903      	bls.n	8001c08 <_malloc_r+0x40>
 8001c00:	600b      	str	r3, [r1, #0]
 8001c02:	18cc      	adds	r4, r1, r3
 8001c04:	50cd      	str	r5, [r1, r3]
 8001c06:	e01e      	b.n	8001c46 <_malloc_r+0x7e>
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	bf0b      	itete	eq
 8001c0c:	6863      	ldreq	r3, [r4, #4]
 8001c0e:	684b      	ldrne	r3, [r1, #4]
 8001c10:	6013      	streq	r3, [r2, #0]
 8001c12:	6063      	strne	r3, [r4, #4]
 8001c14:	bf18      	it	ne
 8001c16:	460c      	movne	r4, r1
 8001c18:	e015      	b.n	8001c46 <_malloc_r+0x7e>
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	6849      	ldr	r1, [r1, #4]
 8001c1e:	e7e9      	b.n	8001bf4 <_malloc_r+0x2c>
 8001c20:	4c17      	ldr	r4, [pc, #92]	; (8001c80 <_malloc_r+0xb8>)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	b91b      	cbnz	r3, 8001c2e <_malloc_r+0x66>
 8001c26:	4630      	mov	r0, r6
 8001c28:	f000 f852 	bl	8001cd0 <_sbrk_r>
 8001c2c:	6020      	str	r0, [r4, #0]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	4630      	mov	r0, r6
 8001c32:	f000 f84d 	bl	8001cd0 <_sbrk_r>
 8001c36:	1c43      	adds	r3, r0, #1
 8001c38:	d018      	beq.n	8001c6c <_malloc_r+0xa4>
 8001c3a:	1cc4      	adds	r4, r0, #3
 8001c3c:	f024 0403 	bic.w	r4, r4, #3
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	d10d      	bne.n	8001c60 <_malloc_r+0x98>
 8001c44:	6025      	str	r5, [r4, #0]
 8001c46:	4630      	mov	r0, r6
 8001c48:	f000 f853 	bl	8001cf2 <__malloc_unlock>
 8001c4c:	f104 000b 	add.w	r0, r4, #11
 8001c50:	1d23      	adds	r3, r4, #4
 8001c52:	f020 0007 	bic.w	r0, r0, #7
 8001c56:	1ac3      	subs	r3, r0, r3
 8001c58:	d00e      	beq.n	8001c78 <_malloc_r+0xb0>
 8001c5a:	425a      	negs	r2, r3
 8001c5c:	50e2      	str	r2, [r4, r3]
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	1a21      	subs	r1, r4, r0
 8001c62:	4630      	mov	r0, r6
 8001c64:	f000 f834 	bl	8001cd0 <_sbrk_r>
 8001c68:	3001      	adds	r0, #1
 8001c6a:	d1eb      	bne.n	8001c44 <_malloc_r+0x7c>
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	6033      	str	r3, [r6, #0]
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 f83e 	bl	8001cf2 <__malloc_unlock>
 8001c76:	2000      	movs	r0, #0
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000009c 	.word	0x2000009c
 8001c80:	20000098 	.word	0x20000098

08001c84 <_realloc_r>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	4607      	mov	r7, r0
 8001c88:	4615      	mov	r5, r2
 8001c8a:	460e      	mov	r6, r1
 8001c8c:	b921      	cbnz	r1, 8001c98 <_realloc_r+0x14>
 8001c8e:	4611      	mov	r1, r2
 8001c90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001c94:	f7ff bf98 	b.w	8001bc8 <_malloc_r>
 8001c98:	b91a      	cbnz	r2, 8001ca2 <_realloc_r+0x1e>
 8001c9a:	f7ff ff49 	bl	8001b30 <_free_r>
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ca2:	f000 f827 	bl	8001cf4 <_malloc_usable_size_r>
 8001ca6:	4285      	cmp	r5, r0
 8001ca8:	d90e      	bls.n	8001cc8 <_realloc_r+0x44>
 8001caa:	4629      	mov	r1, r5
 8001cac:	4638      	mov	r0, r7
 8001cae:	f7ff ff8b 	bl	8001bc8 <_malloc_r>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	b150      	cbz	r0, 8001ccc <_realloc_r+0x48>
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	462a      	mov	r2, r5
 8001cba:	f7ff ff13 	bl	8001ae4 <memcpy>
 8001cbe:	4631      	mov	r1, r6
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f7ff ff35 	bl	8001b30 <_free_r>
 8001cc6:	e001      	b.n	8001ccc <_realloc_r+0x48>
 8001cc8:	4630      	mov	r0, r6
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ccc:	4620      	mov	r0, r4
 8001cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cd0 <_sbrk_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4c06      	ldr	r4, [pc, #24]	; (8001cec <_sbrk_r+0x1c>)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	f000 f87c 	bl	8001dd8 <_sbrk>
 8001ce0:	1c43      	adds	r3, r0, #1
 8001ce2:	d102      	bne.n	8001cea <_sbrk_r+0x1a>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	b103      	cbz	r3, 8001cea <_sbrk_r+0x1a>
 8001ce8:	602b      	str	r3, [r5, #0]
 8001cea:	bd38      	pop	{r3, r4, r5, pc}
 8001cec:	200000e4 	.word	0x200000e4

08001cf0 <__malloc_lock>:
 8001cf0:	4770      	bx	lr

08001cf2 <__malloc_unlock>:
 8001cf2:	4770      	bx	lr

08001cf4 <_malloc_usable_size_r>:
 8001cf4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	bfbe      	ittt	lt
 8001cfc:	1809      	addlt	r1, r1, r0
 8001cfe:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8001d02:	18c0      	addlt	r0, r0, r3
 8001d04:	3804      	subs	r0, #4
 8001d06:	4770      	bx	lr

08001d08 <cleanup_glue>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	6809      	ldr	r1, [r1, #0]
 8001d0e:	4605      	mov	r5, r0
 8001d10:	b109      	cbz	r1, 8001d16 <cleanup_glue+0xe>
 8001d12:	f7ff fff9 	bl	8001d08 <cleanup_glue>
 8001d16:	4621      	mov	r1, r4
 8001d18:	4628      	mov	r0, r5
 8001d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d1e:	f7ff bf07 	b.w	8001b30 <_free_r>
	...

08001d24 <_reclaim_reent>:
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <_reclaim_reent+0xb0>)
 8001d26:	b570      	push	{r4, r5, r6, lr}
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4283      	cmp	r3, r0
 8001d2e:	d050      	beq.n	8001dd2 <_reclaim_reent+0xae>
 8001d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d32:	b1d3      	cbz	r3, 8001d6a <_reclaim_reent+0x46>
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	b193      	cbz	r3, 8001d5e <_reclaim_reent+0x3a>
 8001d38:	2500      	movs	r5, #0
 8001d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	5959      	ldr	r1, [r3, r5]
 8001d40:	b129      	cbz	r1, 8001d4e <_reclaim_reent+0x2a>
 8001d42:	680e      	ldr	r6, [r1, #0]
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff fef3 	bl	8001b30 <_free_r>
 8001d4a:	4631      	mov	r1, r6
 8001d4c:	e7f8      	b.n	8001d40 <_reclaim_reent+0x1c>
 8001d4e:	3504      	adds	r5, #4
 8001d50:	2d80      	cmp	r5, #128	; 0x80
 8001d52:	d1f2      	bne.n	8001d3a <_reclaim_reent+0x16>
 8001d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d56:	4620      	mov	r0, r4
 8001d58:	68d9      	ldr	r1, [r3, #12]
 8001d5a:	f7ff fee9 	bl	8001b30 <_free_r>
 8001d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	b111      	cbz	r1, 8001d6a <_reclaim_reent+0x46>
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7ff fee3 	bl	8001b30 <_free_r>
 8001d6a:	6961      	ldr	r1, [r4, #20]
 8001d6c:	b111      	cbz	r1, 8001d74 <_reclaim_reent+0x50>
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fede 	bl	8001b30 <_free_r>
 8001d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d76:	b111      	cbz	r1, 8001d7e <_reclaim_reent+0x5a>
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff fed9 	bl	8001b30 <_free_r>
 8001d7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d80:	b111      	cbz	r1, 8001d88 <_reclaim_reent+0x64>
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff fed4 	bl	8001b30 <_free_r>
 8001d88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d8a:	b111      	cbz	r1, 8001d92 <_reclaim_reent+0x6e>
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fecf 	bl	8001b30 <_free_r>
 8001d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d94:	b111      	cbz	r1, 8001d9c <_reclaim_reent+0x78>
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff feca 	bl	8001b30 <_free_r>
 8001d9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001d9e:	b111      	cbz	r1, 8001da6 <_reclaim_reent+0x82>
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff fec5 	bl	8001b30 <_free_r>
 8001da6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001da8:	b111      	cbz	r1, 8001db0 <_reclaim_reent+0x8c>
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff fec0 	bl	8001b30 <_free_r>
 8001db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001db2:	b111      	cbz	r1, 8001dba <_reclaim_reent+0x96>
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff febb 	bl	8001b30 <_free_r>
 8001dba:	69a3      	ldr	r3, [r4, #24]
 8001dbc:	b14b      	cbz	r3, 8001dd2 <_reclaim_reent+0xae>
 8001dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4798      	blx	r3
 8001dc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001dc6:	b121      	cbz	r1, 8001dd2 <_reclaim_reent+0xae>
 8001dc8:	4620      	mov	r0, r4
 8001dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001dce:	f7ff bf9b 	b.w	8001d08 <cleanup_glue>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	20000088 	.word	0x20000088

08001dd8 <_sbrk>:
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <_sbrk+0x14>)
 8001dda:	4905      	ldr	r1, [pc, #20]	; (8001df0 <_sbrk+0x18>)
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf08      	it	eq
 8001de2:	460b      	moveq	r3, r1
 8001de4:	4418      	add	r0, r3
 8001de6:	6010      	str	r0, [r2, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	4770      	bx	lr
 8001dec:	200000a0 	.word	0x200000a0
 8001df0:	200000e8 	.word	0x200000e8
